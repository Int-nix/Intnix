{
  "caclulator": {
    "file": "/pkgrepo/caclulator.app",
    "icon": "calculator.jpg",
    "description": "cacluator",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Scientific Calculator</title>\n  <style>\n    body {\n      margin: 0;\n      font-family: \"Segoe UI\", sans-serif;\n      background: transparent;\n      backdrop-filter: blur(12px);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      height: 100vh;\n    }\n\n    #calculator {\n      width: 400px;\n      background: rgba(255, 255, 255, 0.08);\n      border: 1px solid rgba(255, 255, 255, 0.15);\n      border-radius: 16px;\n      padding: 20px;\n      color: white;\n      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);\n    }\n\n    #display {\n      width: 95%;\n      height: 50px;\n      font-size: 1.6em;\n      padding: 10px;\n      margin-bottom: 16px;\n      text-align: right;\n      border: none;\n      border-radius: 8px;\n      background: rgba(0, 0, 0, 0.6);\n      color: #88ffc4;\n  text-shadow: 0 0 5px #00ff88, 0 0 10px #00ff88;\n\n    }\n\n    .buttons {\n      display: grid;\n      grid-template-columns: repeat(5, 1fr);\n      gap: 10px;\n    }\n\n    button {\n      padding: 14px;\n      font-size: 1.1em;\n      background: rgba(255, 255, 255, 0.08);\n      border: 1px solid rgba(255, 255, 255, 0.15);\n      border-radius: 8px;\n      color: white;\n      cursor: pointer;\n      transition: background 0.2s ease;\n    }\n\n    button:hover {\n      background: rgba(255, 255, 255, 0.15);\n    }\n\n    .wide {\n      grid-column: span 2;\n    }\n\n    .function { color: #00ccff; }\n    .operator { color: #ffaa00; }\n  </style>\n</head>\n<body>\n  <div id=\"calculator\">\n    <input id=\"display\" type=\"text\" readonly />\n    <div class=\"buttons\">\n      <button onclick=\"insert('(')\">(</button>\n      <button onclick=\"insert(')')\">)</button>\n      <button onclick=\"insert('^')\" class=\"operator\">^</button>\n      <button onclick=\"insert('sqrt(')\" class=\"function\">‚àö</button>\n      <button onclick=\"clearDisplay()\">C</button>\n\n      <button onclick=\"insert('7')\">7</button>\n      <button onclick=\"insert('8')\">8</button>\n      <button onclick=\"insert('9')\">9</button>\n      <button onclick=\"insert('/')\" class=\"operator\">√∑</button>\n      <button onclick=\"insert('log(')\" class=\"function\">log</button>\n\n      <button onclick=\"insert('4')\">4</button>\n      <button onclick=\"insert('5')\">5</button>\n      <button onclick=\"insert('6')\">6</button>\n      <button onclick=\"insert('*')\" class=\"operator\">√ó</button>\n      <button onclick=\"insert('ln(')\" class=\"function\">ln</button>\n\n      <button onclick=\"insert('1')\">1</button>\n      <button onclick=\"insert('2')\">2</button>\n      <button onclick=\"insert('3')\">3</button>\n      <button onclick=\"insert('-')\" class=\"operator\">‚àí</button>\n      <button onclick=\"insert('pi')\" class=\"function\">œÄ</button>\n\n      <button onclick=\"insert('0')\">0</button>\n      <button onclick=\"insert('.')\">.</button>\n      <button onclick=\"calculate()\" class=\"wide operator\">=</button>\n      <button onclick=\"insert('+')\" class=\"operator\">+</button>\n      <button onclick=\"insert('e')\" class=\"function\">e</button>\n\n      <button onclick=\"insert('sin(')\" class=\"function\">sin</button>\n      <button onclick=\"insert('cos(')\" class=\"function\">cos</button>\n      <button onclick=\"insert('tan(')\" class=\"function\">tan</button>\n      <button onclick=\"backspace()\">‚å´</button>\n    </div>\n  </div>\n\n  <script>\n    const display = document.getElementById(\"display\");\n\n    function insert(value) {\n      display.value += value;\n    }\n\n    function clearDisplay() {\n      display.value = '';\n    }\n\n    function backspace() {\n      display.value = display.value.slice(0, -1);\n    }\n\n    function calculate() {\n      try {\n        const expr = display.value\n          .replace(/pi/g, Math.PI)\n          .replace(/e/g, Math.E)\n          .replace(/sqrt/g, 'Math.sqrt')\n          .replace(/ln/g, 'Math.log')\n          .replace(/log/g, 'Math.log10')\n          .replace(/sin/g, 'Math.sin')\n          .replace(/cos/g, 'Math.cos')\n          .replace(/tan/g, 'Math.tan')\n          .replace(/\\^/g, '**');\n\n        display.value = eval(expr);\n      } catch {\n        display.value = \"Error\";\n      }\n    }\n\n    // Keyboard support\n    document.addEventListener(\"keydown\", (e) => {\n      const key = e.key;\n\n      if (!isNaN(key) || \"+-*/().\".includes(key)) {\n        insert(key);\n      } else if (key === \"Enter\") {\n        calculate();\n      } else if (key === \"Backspace\") {\n        backspace();\n      }\n    });\n  </script>\n</body>\n</html>\n"
  },
  "photos": {
    "file": "/pkgrepo/photos.app",
    "icon": "photos.jpg",
    "description": "photos",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Image Viewer</title>\n  <style>\n    * {\n      box-sizing: border-box;\n    }\n\n    body {\n      margin: 0;\n      background-color: #1e1e1e;\n      font-family: 'Segoe UI', sans-serif;\n      color: #fff;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      height: 100vh;\n      overflow: hidden;\n    }\n\n    header {\n      width: 100%;\n      background: #2a2a2a;\n      padding: 15px 30px;\n      font-size: 24px;\n      font-weight: bold;\n      text-align: center;\n      border-bottom: 1px solid #444;\n    }\n\n    .toolbar {\n      margin: 15px 0;\n      display: flex;\n      gap: 10px;\n    }\n\n    .toolbar button, .toolbar input[type=\"file\"] {\n      background: #333;\n      border: 1px solid #555;\n      color: white;\n      padding: 10px 15px;\n      border-radius: 5px;\n      font-size: 14px;\n      cursor: pointer;\n      transition: background 0.2s;\n    }\n\n    .toolbar button:hover {\n      background: #444;\n    }\n\n    canvas {\n      background: #111;\n      border: 2px solid #444;\n      border-radius: 6px;\n      max-width: 90%;\n      max-height: 75vh;\n    }\n\n    #dropzone {\n      flex: 1;\n      width: 100%;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n\n    #dropzone.dragover {\n      border: 2px dashed #777;\n      background: #2c2c2c;\n    }\n\n    input[type=\"file\"] {\n      display: none;\n    }\n\n    label[for=\"fileInput\"] {\n      background: #333;\n      border: 1px solid #555;\n      color: white;\n      padding: 10px 15px;\n      border-radius: 5px;\n      font-size: 14px;\n      cursor: pointer;\n    }\n  </style>\n</head>\n<body>\n\n  <header>üñºÔ∏è Intnix Image Viewer</header>\n\n  <div class=\"toolbar\">\n    <label for=\"fileInput\">üìÅ Upload Image</label>\n    <button onclick=\"zoomIn()\">‚ûï Zoom In</button>\n    <button onclick=\"zoomOut()\">‚ûñ Zoom Out</button>\n    <button onclick=\"resetZoom()\">üîÅ Reset Zoom</button>\n    <button onclick=\"exportImage('png')\">üì§ Export PNG</button>\n    <button onclick=\"exportImage('jpg')\">üì§ Export JPG</button>\n  </div>\n\n  <input type=\"file\" id=\"fileInput\" accept=\"image/*\" />\n\n  <div id=\"dropzone\">\n    <canvas id=\"canvas\"></canvas>\n  </div>\n\n  <script>\n    const fileInput = document.getElementById('fileInput');\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext('2d');\n    const dropzone = document.getElementById('dropzone');\n\n    let image = null;\n    let scale = 1;\n\n    fileInput.addEventListener('change', () => {\n      if (fileInput.files[0]) loadImage(fileInput.files[0]);\n    });\n\n    dropzone.addEventListener('dragover', e => {\n      e.preventDefault();\n      dropzone.classList.add('dragover');\n    });\n\n    dropzone.addEventListener('dragleave', () => {\n      dropzone.classList.remove('dragover');\n    });\n\n    dropzone.addEventListener('drop', e => {\n      e.preventDefault();\n      dropzone.classList.remove('dragover');\n      const file = e.dataTransfer.files[0];\n      if (file && file.type.startsWith('image/')) loadImage(file);\n    });\n\n    function loadImage(file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        image = new Image();\n        image.onload = () => {\n          canvas.width = image.width;\n          canvas.height = image.height;\n          scale = 1;\n          drawImage();\n        };\n        image.src = e.target.result;\n        canvas.dataset.imgSrc = image.src;\n      };\n      reader.readAsDataURL(file);\n    }\n\n    function drawImage() {\n      if (!image) return;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      const w = image.width * scale;\n      const h = image.height * scale;\n      const x = (canvas.width - w) / 2;\n      const y = (canvas.height - h) / 2;\n      ctx.setTransform(1, 0, 0, 1, 0, 0); // reset\n      ctx.translate(canvas.width / 2, canvas.height / 2);\n      ctx.scale(scale, scale);\n      ctx.translate(-image.width / 2, -image.height / 2);\n      ctx.drawImage(image, 0, 0);\n    }\n\n    function zoomIn() {\n      scale *= 1.2;\n      drawImage();\n    }\n\n    function zoomOut() {\n      scale /= 1.2;\n      drawImage();\n    }\n\n    function resetZoom() {\n      scale = 1;\n      drawImage();\n    }\n\n    function exportImage(format) {\n      if (!image) return;\n      const link = document.createElement('a');\n      link.download = `image-export.${format}`;\n      link.href = canvas.toDataURL(`image/${format}`);\n      link.click();\n    }\n  </script>\n\n</body>\n</html>\n"
  },
  "sheets": {
    "file": "/pkgrepo/sheets.app",
    "icon": "sheets.jpg",
    "description": "sheets viewer",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Sheet</title>\n  <style>\n    html, body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      font-family: 'Segoe UI', sans-serif;\n      background: #f4f5f8;\n      overflow: hidden;\n    }\n\n    .toolbar {\n      background: #ffffff;\n      padding: 10px 16px;\n      display: flex;\n      align-items: center;\n      border-bottom: 1px solid #ccc;\n      gap: 10px;\n    }\n\n    .btn {\n      background: #0b57d0;\n      color: white;\n      padding: 6px 14px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-weight: bold;\n    }\n\n    .btn:hover {\n      background: #0a47b8;\n    }\n\n    input[type=\"file\"] {\n      display: none;\n    }\n\n    #sheetContainer {\n      height: calc(100% - 50px);\n      overflow: auto;\n    }\n\n    table {\n      border-collapse: collapse;\n      width: 100%;\n    }\n\n    th, td {\n      border: 1px solid #d0d0d0;\n      padding: 8px;\n      min-width: 100px;\n      max-width: 400px;\n      background: white;\n      color: #333;\n      outline: none;\n      font-size: 14px;\n    }\n\n    th {\n      background: #f0f0f0;\n      font-weight: 600;\n      text-align: center;\n    }\n\n    td:focus {\n      background: #e6f0ff;\n    }\n\n    tr:nth-child(even) td {\n      background: #fafafa;\n    }\n\n  </style>\n</head>\n<body>\n\n  <div class=\"toolbar\">\n    <label class=\"btn\" for=\"csvInput\">üìÅ Upload</label>\n    <input type=\"file\" id=\"csvInput\" accept=\".csv\" />\n    <button class=\"btn\" onclick=\"downloadCSV()\">üíæ Export</button>\n  </div>\n\n  <div id=\"sheetContainer\"></div>\n\n  <script>\n    const container = document.getElementById(\"sheetContainer\");\n    const input = document.getElementById(\"csvInput\");\n\n    input.addEventListener(\"change\", () => {\n      const file = input.files[0];\n      if (!file) return;\n      const reader = new FileReader();\n      reader.onload = e => {\n        const lines = e.target.result.split(\"\\n\").map(l => l.trim());\n        renderTable(lines.map(line => line.split(\",\")));\n      };\n      reader.readAsText(file);\n    });\n\n    function renderTable(data = []) {\n      const table = document.createElement(\"table\");\n\n      const numRows = Math.max(data.length || 0, 20);\n      const numCols = Math.max((data[0]?.length || 0), 10);\n\n      for (let i = 0; i <= numRows; i++) {\n        const tr = document.createElement(\"tr\");\n        for (let j = 0; j <= numCols; j++) {\n          let cell;\n          if (i === 0 && j === 0) {\n            cell = document.createElement(\"th\");\n            cell.textContent = \"\";\n          } else if (i === 0) {\n            cell = document.createElement(\"th\");\n            cell.textContent = String.fromCharCode(64 + j);\n          } else if (j === 0) {\n            cell = document.createElement(\"th\");\n            cell.textContent = i;\n          } else {\n            cell = document.createElement(\"td\");\n            cell.contentEditable = true;\n            cell.textContent = data[i - 1]?.[j - 1] || \"\";\n            cell.addEventListener(\"input\", () => maybeExpand(table));\n          }\n          tr.appendChild(cell);\n        }\n        table.appendChild(tr);\n      }\n\n      container.innerHTML = \"\";\n      container.appendChild(table);\n    }\n\n    function maybeExpand(table) {\n      const rows = table.rows.length;\n      const cols = table.rows[0].cells.length;\n\n      const lastRow = table.rows[rows - 1];\n      const lastCell = lastRow.cells[cols - 1];\n      if (lastCell && lastCell.textContent.trim() !== \"\") {\n        renderTable(getTableData(table));\n      }\n    }\n\n    function getTableData(table = container.querySelector(\"table\")) {\n      const rows = Array.from(table.rows).slice(1);\n      return rows.map(row => {\n        const cells = Array.from(row.cells).slice(1);\n        return cells.map(td => td.textContent);\n      });\n    }\n\n    function downloadCSV() {\n      const data = getTableData();\n      const csv = data.map(row =>\n        row.map(cell => `\"${cell.replace(/\"/g, '\"\"')}\"`).join(\",\")\n      ).join(\"\\n\");\n\n      const blob = new Blob([csv], { type: \"text/csv\" });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"sheet.csv\";\n      a.click();\n      URL.revokeObjectURL(url);\n    }\n\n    renderTable(); // Load blank sheet\n  </script>\n\n</body>\n</html>\n"
  },
  "CSSDraw": {
    "file": "/pkgrepo/CSSDraw.app",
    "icon": "cssdraw.jpg",
    "description": "css sketch tool",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>UI to CSS Generator - Photoshop Style</title>\n    <style>\nbody { font-family: Arial, sans-serif; background-color: #2e2e2e; margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; color: white; }\n.container { width: 90%; max-width: 900px; background: #3c3c3c; padding: 20px; border-radius: 8px; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3); display: flex; flex-direction: row; justify-content: space-between; align-items: flex-start; height: 80vh; }\n.element-0 { position: relative; width: 60%; height: 70vh; border: 2px solid red; background: #222; display: flex; justify-content: center; align-items: center; }\ncanvas { width: 100%; height: 100%; cursor: crosshair; background: #333; }\n.element-1 { position: relative; width: 30%; height: 70vh; border: 2px solid red; background: #1e1e1e; padding: 10px; display: flex; flex-direction: column; justify-content: center; }\n#css-output { width: 100%; height: 100%; font-family: monospace; background: #1e1e1e; color: #ddd; border: none; resize: none; }\n.element-2 { position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%); width: 450px; height: 60px; display: flex; justify-content: space-around; align-items: center; border: 2px solid red; background: #444; border-radius: 5px; padding: 10px; }\nbutton { padding: 10px 15px; background: #007acc; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; transition: 0.3s; }\nbutton:hover { background: #005f99; }\n.selected { border: 2px dashed yellow !important; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"element-0\">\n            <canvas id=\"canvas\"></canvas>\n        </div>\n        <div class=\"element-1\">\n            <h3>Generated CSS</h3>\n            <textarea id=\"css-output\" readonly></textarea>\n        </div>\n        <div class=\"element-2\">\n            <button id=\"toggle-mode\">Mode: Draw</button>\n            <button id=\"clear\">Clear</button>\n            <button id=\"undo\">Undo</button>\n        </div>\n    </div>\n    <script>\nconst canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\nconst cssOutput = document.getElementById('css-output');\nconst clearButton = document.getElementById('clear');\nconst undoButton = document.getElementById('undo');\nconst modeButton = document.getElementById('toggle-mode');\n\nlet mode = \"draw\";\nlet drawing = false, startX, startY;\nlet elements = [];\nlet selectedElement = null, offsetX = 0, offsetY = 0;\nlet copiedElement = null;\n\nfunction resizeCanvas() {\n    canvas.width = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n    recalculateElements();\n}\nwindow.addEventListener('resize', resizeCanvas);\nresizeCanvas();\n\nfunction getRectangleBounds(x1, y1, x2, y2) {\n    return {\n        left: Math.min(x1, x2) / canvas.width,\n        top: Math.min(y1, y2) / canvas.height,\n        width: Math.abs(x2 - x1) / canvas.width,\n        height: Math.abs(y2 - y1) / canvas.height\n    };\n}\n\nfunction drawRectangles() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    elements.forEach((el, i) => {\n        ctx.strokeStyle = el === selectedElement ? 'yellow' : 'cyan';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(el.left * canvas.width, el.top * canvas.height, el.width * canvas.width, el.height * canvas.height);\n    });\n}\n\ncanvas.addEventListener('mousedown', (e) => {\n    if (mode === \"draw\") {\n        drawing = true;\n        startX = e.offsetX;\n        startY = e.offsetY;\n    } else if (mode === \"select\") {\n        selectedElement = elements.find(el => e.offsetX >= el.left * canvas.width && e.offsetX <= (el.left + el.width) * canvas.width &&\n                                             e.offsetY >= el.top * canvas.height && e.offsetY <= (el.top + el.height) * canvas.height);\n        if (selectedElement) {\n            offsetX = e.offsetX / canvas.width - selectedElement.left;\n            offsetY = e.offsetY / canvas.height - selectedElement.top;\n        }\n        drawRectangles();\n    }\n});\n\ncanvas.addEventListener('mousemove', (e) => {\n    if (drawing) {\n        drawRectangles();\n        let rect = getRectangleBounds(startX, startY, e.offsetX, e.offsetY);\n        ctx.strokeStyle = 'cyan';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(rect.left * canvas.width, rect.top * canvas.height, rect.width * canvas.width, rect.height * canvas.height);\n    } else if (selectedElement && mode === \"select\" && e.buttons === 1) {\n        selectedElement.left = e.offsetX / canvas.width - offsetX;\n        selectedElement.top = e.offsetY / canvas.height - offsetY;\n        drawRectangles();\n    }\n});\n\ncanvas.addEventListener('mouseup', (e) => {\n    if (drawing) {\n        drawing = false;\n        let rect = getRectangleBounds(startX, startY, e.offsetX, e.offsetY);\n        elements.push(rect);\n    }\n    drawRectangles();\n    generateCSS();\n});\n\nfunction recalculateElements() {\n    drawRectangles();\n    generateCSS();\n}\n\nfunction generateCSS() {\n    cssOutput.value = elements.map((el, i) => \n        `.element-${i} {\n  position: absolute;\n  top: ${(el.top * 100).toFixed(2)}%;\n  left: ${(el.left * 100).toFixed(2)}%;\n  width: ${(el.width * 100).toFixed(2)}%;\n  height: ${(el.height * 100).toFixed(2)}%;\n  border: 2px solid red;\n}`).join('\\n\\n');\n}\n\ndocument.addEventListener('keydown', (e) => {\n    if (mode === \"select\" && selectedElement) {\n        if (e.ctrlKey && e.key === 'c') {\n            copiedElement = { ...selectedElement };\n        }\n        if (e.ctrlKey && e.key === 'v' && copiedElement) {\n            elements.push({ ...copiedElement, left: copiedElement.left + 0.02, top: copiedElement.top + 0.02 });\n            drawRectangles();\n            generateCSS();\n        }\n    }\n});\n\nclearButton.addEventListener('click', () => {\n    elements = [];\n    drawRectangles();\n    cssOutput.value = '';\n});\n\nundoButton.addEventListener('click', () => {\n    elements.pop();\n    drawRectangles();\n    generateCSS();\n});\n\nmodeButton.addEventListener('click', () => {\n    mode = mode === \"draw\" ? \"select\" : \"draw\";\n    modeButton.textContent = `Mode: ${mode.charAt(0).toUpperCase() + mode.slice(1)}`;\n});\n\n    </script>\n</body>\n</html>"
  },
  "MP4player": {
    "file": "/pkgrepo/MP4player.app",
    "icon": "mp4.jpg",
    "description": "MP4 player",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Pop!_OS Style MP4 Player</title>\n  <style>\n    :root {\n      --bg: #1f1f28;\n      --surface: #282c34;\n      --accent: #19a5a5;\n      --accent-hover: #149191;\n      --text: #e6edf3;\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n\n    html, body {\n      height: 100%;\n      margin: 0;\n    }\n\n    body {\n      background: var(--bg);\n      font-family: 'Segoe UI', sans-serif;\n      color: var(--text);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      padding: 20px;\n    }\n\n    .player-container {\n      background: var(--surface);\n      border-radius: 16px;\n      box-shadow: 0 12px 32px rgba(0, 0, 0, 0.5);\n      padding: 24px;\n      width: 100%;\n      max-width: 1200px;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 16px;\n    }\n\n    .video-wrapper {\n      width: 100%;\n      aspect-ratio: 16 / 9;\n      background: black;\n      border-radius: 12px;\n      overflow: hidden;\n    }\n\n    video {\n      width: 100%;\n      height: 100%;\n      object-fit: contain;\n      background: black;\n    }\n\n    .upload-btn {\n      background: var(--accent);\n      color: #fff;\n      padding: 10px 24px;\n      border: none;\n      border-radius: 8px;\n      font-size: 16px;\n      cursor: pointer;\n      transition: background 0.3s ease;\n    }\n\n    .upload-btn:hover {\n      background: var(--accent-hover);\n    }\n\n    input[type=\"file\"] {\n      display: none;\n    }\n\n    @media (max-width: 600px) {\n      .upload-btn {\n        width: 100%;\n      }\n    }\n  </style>\n</head>\n<body>\n\n  <div class=\"player-container\">\n    <div class=\"video-wrapper\">\n      <video id=\"videoPlayer\" controls>\n        <source id=\"videoSource\" src=\"\" type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n    </div>\n\n    <label class=\"upload-btn\" for=\"fileInput\">üìÅ Upload MP4</label>\n    <input type=\"file\" id=\"fileInput\" accept=\"video/mp4\"/>\n  </div>\n\n  <script>\n    const fileInput = document.getElementById('fileInput');\n    const videoPlayer = document.getElementById('videoPlayer');\n    const videoSource = document.getElementById('videoSource');\n\n    fileInput.addEventListener('change', () => {\n      const file = fileInput.files[0];\n      if (file && file.type === 'video/mp4') {\n        const fileURL = URL.createObjectURL(file);\n        videoSource.src = fileURL;\n        videoPlayer.load();\n        videoPlayer.play();\n      } else {\n        alert(\"Please upload a valid MP4 file.\");\n      }\n    });\n  </script>\n\n</body>\n</html>\n"
  },
  "PDFOCR": {
    "file": "/pkgrepo/PDFOCR.app",
    "icon": "pdfocr.jpg",
    "description": "Optical Character recogintion for PDF",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>PDF Viewer with OCR</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/tesseract.js/4.0.2/tesseract.min.js\"></script>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n            text-align: center;\n            padding: 20px;\n            background-color: #f5f5f7;\n            color: #333;\n        }\n        h2 {\n            font-weight: 600;\n        }\n        .container {\n            background: white;\n            padding: 20px;\n            border-radius: 12px;\n            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n            display: inline-block;\n            text-align: left;\n        }\n        canvas {\n            border: 1px solid #ccc;\n            cursor: crosshair;\n            display: block;\n            margin: 10px auto;\n            border-radius: 8px;\n        }\n        #controls {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            gap: 10px;\n            flex-wrap: wrap;\n            margin-bottom: 10px;\n        }\n        button, select, input {\n            padding: 10px 15px;\n            font-size: 14px;\n            border-radius: 8px;\n            border: none;\n            background-color: #007AFF;\n            color: white;\n            cursor: pointer;\n            transition: all 0.2s;\n        }\n        button:hover, select:hover, input:hover {\n            background-color: #005ecb;\n        }\n        button:disabled {\n            background-color: #ccc;\n            cursor: not-allowed;\n        }\n        #output {\n            margin-top: 20px;\n            font-weight: bold;\n            white-space: pre-wrap;\n            background: #fff;\n            padding: 10px;\n            border-radius: 8px;\n            box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);\n        }\n\t\t   #selectionOverlay {\n        position: absolute;\n        border: 2px dashed red;\n        background: rgba(255, 0, 0, 0.2);\n        display: none;\n        pointer-events: none; /* Prevents blocking interactions */\n        z-index: 10; /* Keeps it above everything */\n    }\n    </style>\n</head>\n<body>\n    <h2>PDF Viewer with OCR</h2>\n    <div class=\"container\">\n        <div id=\"controls\">\n            <input type=\"file\" id=\"pdfUpload\" accept=\"application/pdf\">\n\t\t\t   <input type=\"range\" id=\"sizeSlider\" min=\"300\" max=\"900\" value=\"600\">\n            <button id=\"prevPage\">‚óÄ Prev</button>\n            <button id=\"nextPage\">Next ‚ñ∂</button>\n            <span>Page: <span id=\"pageNum\">1</span> / <span id=\"pageCount\">?</span></span>\n            <select id=\"languageSelect\">\n                <option value=\"eng\" selected>English</option>\n                <option value=\"spa\">Spanish</option>\n                <option value=\"fra\">French</option>\n                <option value=\"deu\">German</option>\n            </select>\n            <button id=\"extractText\">Extract Text</button>\n        </div>\n<div id=\"selectionOverlay\"></div>\n        <canvas id=\"pdfCanvas\"></canvas>\n        <div id=\"output\">Extracted Text: </div>\n    </div>\n    \n    <script>\nlet pdfDoc = null, pageNum = 1, pageCount = 0;\nlet canvas = document.getElementById(\"pdfCanvas\");\nlet ctx = canvas.getContext(\"2d\");\nlet selection = null, startX, startY, endX, endY;\nlet isDrawing = false;\n\n// Create an overlay canvas for smooth selection\nlet overlayCanvas = document.createElement(\"canvas\");\nlet overlayCtx = overlayCanvas.getContext(\"2d\");\noverlayCanvas.style.position = \"absolute\";\noverlayCanvas.style.pointerEvents = \"none\"; // Allow interaction with the main canvas\ndocument.body.appendChild(overlayCanvas);\n\n// Function to resize the overlay dynamically\nfunction resizeOverlay() {\n    let rect = canvas.getBoundingClientRect(); // Get the updated position and size\n    overlayCanvas.width = canvas.width;\n    overlayCanvas.height = canvas.height;\n    overlayCanvas.style.top = `${rect.top + window.scrollY}px`;\n    overlayCanvas.style.left = `${rect.left + window.scrollX}px`;\n}\n\n// Resize overlay when the window resizes\nwindow.addEventListener(\"resize\", resizeOverlay);\n\n// PDF Upload\ndocument.getElementById(\"pdfUpload\").addEventListener(\"change\", function(event) {\n    let file = event.target.files[0];\n    if (file) {\n        let fileReader = new FileReader();\n        fileReader.readAsArrayBuffer(file);\n        fileReader.onload = function() {\n            let typedarray = new Uint8Array(this.result);\n            \n            // Close previous PDF if it exists\n            if (pdfDoc) {\n                pdfDoc.destroy();\n                pdfDoc = null;\n            }\n\n            pdfjsLib.getDocument(typedarray).promise.then(function(pdf) {\n                pdfDoc = pdf;\n                pageCount = pdf.numPages;\n                pageNum = 1; // Reset to first page\n\n                document.getElementById(\"pageCount\").innerText = pageCount;\n                document.getElementById(\"pageNum\").innerText = pageNum;\n\n                clearCanvas(); // Clear previous PDF\n                renderPage(pageNum);\n            });\n        };\n    }\n});\n\n// Function to clear the canvas when loading a new PDF\nfunction clearCanvas() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    canvas.width = 0;\n    canvas.height = 0;\n}\n\n// Render PDF Page\nfunction renderPage(num) {\n    if (!pdfDoc) return; // Prevent errors if no PDF is loaded\n\n    pdfDoc.getPage(num).then(function(page) {\n        let scale = document.getElementById(\"sizeSlider\").value / 600; // Scale dynamically\n        let viewport = page.getViewport({ scale: scale });\n\n        canvas.width = viewport.width;\n        canvas.height = viewport.height;\n\n        let renderContext = {\n            canvasContext: ctx,\n            viewport: viewport\n        };\n        page.render(renderContext);\n\n        document.getElementById(\"pageNum\").innerText = num;\n        resizeOverlay(); // Resize overlay after rendering\n    });\n}\n\n\n// Page Navigation\ndocument.getElementById(\"prevPage\").addEventListener(\"click\", function() {\n    if (pageNum > 1) {\n        pageNum--;\n        renderPage(pageNum);\n    }\n});\n\ndocument.getElementById(\"nextPage\").addEventListener(\"click\", function() {\n    if (pageNum < pageCount) {\n        pageNum++;\n        renderPage(pageNum);\n    }\n});\n\n// Adjust Canvas Size with Slider\ndocument.getElementById(\"sizeSlider\").addEventListener(\"input\", function() {\n    renderPage(pageNum); // Re-render the PDF page with the new size\n});\n\n// Selection Tool Events\ncanvas.addEventListener(\"mousedown\", (event) => {\n    startX = event.offsetX;\n    startY = event.offsetY;\n    isDrawing = true;\n});\n\ncanvas.addEventListener(\"mousemove\", (event) => {\n    if (!isDrawing) return;\n\n    endX = event.offsetX;\n    endY = event.offsetY;\n\n    // Clear previous selection overlay\n    overlayCtx.clearRect(0, 0, overlayCanvas.width, overlayCanvas.height);\n\n    // Draw the selection rectangle\n    overlayCtx.strokeStyle = \"red\";\n    overlayCtx.lineWidth = 2;\n    overlayCtx.strokeRect(startX, startY, endX - startX, endY - startY);\n});\n\ncanvas.addEventListener(\"mouseup\", (event) => {\n    isDrawing = false;\n    endX = event.offsetX;\n    endY = event.offsetY;\n    selection = {\n        x: startX,\n        y: startY,\n        width: endX - startX,\n        height: endY - startY,\n    };\n\n    // Draw the final rectangle on the main canvas\n    ctx.strokeStyle = \"red\";\n    ctx.lineWidth = 2;\n    ctx.strokeRect(selection.x, selection.y, selection.width, selection.height);\n\n    // Clear the overlay canvas\n    overlayCtx.clearRect(0, 0, overlayCanvas.width, overlayCanvas.height);\n});\n\n// OCR Extraction\ndocument.getElementById(\"extractText\").addEventListener(\"click\", () => {\n    if (!selection) {\n        alert(\"Please select a region first!\");\n        return;\n    }\n\n    let imageData = ctx.getImageData(selection.x, selection.y, selection.width, selection.height);\n    let tempCanvas = document.createElement(\"canvas\");\n    let tempCtx = tempCanvas.getContext(\"2d\");\n\n    tempCanvas.width = selection.width;\n    tempCanvas.height = selection.height;\n    tempCtx.putImageData(imageData, 0, 0);\n\n    let language = document.getElementById(\"languageSelect\").value;\n\n    tempCanvas.toBlob((blob) => {\n        Tesseract.recognize(blob, language).then(({ data: { text } }) => {\n            let cleanedText = cleanExtractedText(text);\n            if (cleanedText) {\n                appendBulletPoint(cleanedText);\n            }\n        });\n    });\n});\n\n// Function to clean extracted text\nfunction cleanExtractedText(text) {\n    return text\n        .split(\"\\n\")                      // Split by new lines\n        .map(line => line.trim())         // Trim spaces from each line\n        .filter(line => line.length > 0)  // Remove empty lines\n        .join(\" \");                        // Join into a single formatted paragraph\n}\n\n// Function to append extracted text as a properly formatted bullet point\n// Function to display extracted text as a single entry instead of a bullet list\nfunction appendBulletPoint(text) {\n    let outputDiv = document.getElementById(\"output\");\n    outputDiv.textContent = text; // Replace content instead of appending\n}\n\n\n\n\n    </script>\n</body>\n</html>"
  },
  "Texteditor": {
    "file": "/pkgrepo/Texteditor.app",
    "icon": "texteditor.jpg",
    "description": "Text editor",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Feature-Rich Text Editor</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n            color: #333;\n            display: flex;\n            flex-direction: column;\n            height: 100vh;\n        }\n        .toolbar {\n            background-color: #007bff;\n            padding: 10px;\n            display: flex;\n            flex-wrap: wrap;\n            gap: 10px;\n            color: white;\n        }\n        .toolbar button, .toolbar select, .toolbar input[type=\"color\"] {\n            padding: 5px 10px;\n            font-size: 16px;\n            border: none;\n            cursor: pointer;\n        }\n        .toolbar button:hover {\n            background-color: #0056b3;\n        }\n        .editor-container {\n            flex: 1;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            padding: 20px;\n            box-sizing: border-box;\n        }\n        .editor {\n            width: 100%;\n            max-width: 850px;\n            height: 100%;\n            max-height: calc(100% - 20px);\n            margin: auto;\n            padding: 1in;\n            border: 1px solid #ccc;\n            outline: none;\n            overflow-y: auto;\n            background-color: #fff;\n            color: #000;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            box-sizing: border-box;\n        }\n        .dark-mode {\n            background-color: #333;\n            color: #fff;\n        }\n        .dark-mode .toolbar {\n            background-color: #444;\n        }\n        .dark-mode .editor {\n            background-color: #222;\n            color: #ddd;\n            border-color: #555;\n            box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"toolbar\">\n        <button onclick=\"execCmd('bold')\"><b>B</b></button>\n        <button onclick=\"execCmd('italic')\"><i>I</i></button>\n        <button onclick=\"execCmd('underline')\"><u>U</u></button>\n        <button onclick=\"execCmd('strikeThrough')\"><s>S</s></button>\n        <button onclick=\"execCmd('justifyLeft')\">Left</button>\n        <button onclick=\"execCmd('justifyCenter')\">Center</button>\n        <button onclick=\"execCmd('justifyRight')\">Right</button>\n        <button onclick=\"execCmd('justifyFull')\">Justify</button>\n        <button onclick=\"execCmd('insertOrderedList')\">OL</button>\n        <button onclick=\"execCmd('insertUnorderedList')\">UL</button>\n        <select onchange=\"execCmdWithArg('fontSize', this.value)\">\n            <option value=\"3\">Font Size</option>\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n            <option value=\"6\">6</option>\n            <option value=\"7\">7</option>\n        </select>\n        <input type=\"color\" onchange=\"execCmdWithArg('foreColor', this.value)\" title=\"Font Color\">\n        <button onclick=\"undo()\">Undo</button>\n        <button onclick=\"redo()\">Redo</button>\n        <button onclick=\"clearEditor()\">Clear</button>\n        <button onclick=\"saveContent()\">Save</button>\n        <input type=\"file\" id=\"fileInput\" onchange=\"loadContent(event)\">\n        <button onclick=\"toggleDarkMode()\">Dark/Light Mode</button>\n        <input type=\"file\" id=\"fileInput\" onchange=\"loadContent(event)\" accept=\".html\">\n         <button onclick=\"exportContent()\">Export</button> <!-- New Export Button -->\n    </div>\n    <div class=\"editor-container\">\n        <div id=\"editor\" class=\"editor\" contenteditable=\"true\"></div>\n    </div>\n\n    <script>\n        function execCmd(command) {\n            document.execCommand(command, false, null);\n        }\n\n        function execCmdWithArg(command, arg) {\n            document.execCommand(command, false, arg);\n        }\n\n        function undo() {\n            document.execCommand('undo', false, null);\n        }\n\n        function redo() {\n            document.execCommand('redo', false, null);\n        }\n\n        function clearEditor() {\n            document.getElementById('editor').innerHTML = '';\n        }\n\n        function saveContent() {\n            const content = document.getElementById('editor').innerHTML;\n            const blob = new Blob([content], { type: 'text/html' });\n            const a = document.createElement('a');\n            a.href = URL.createObjectURL(blob);\n            a.download = 'document.html';\n            a.click();\n        }\n\n        function importHtmlFile(event) {\n              const file = event.target.files[0];\n              if (file) {\n                  const reader = new FileReader();\n                  reader.onload = function(e) {\n                      document.getElementById('editor').textContent = e.target.result;\n                  };\n                  reader.readAsText(file);\n              }\n          }\n\n        function toggleDarkMode() {\n            document.body.classList.toggle('dark-mode');\n        }\n        function exportContent() {\n            const content = document.getElementById('editor').innerHTML;\n            const fileName = prompt('Enter the file name:', 'exported_document.html');\n            if (fileName) {\n                const blob = new Blob([content], { type: 'text/html' });\n                const a = document.createElement('a');\n                a.href = URL.createObjectURL(blob);\n                a.download = fileName.endsWith('.html') ? fileName : `${fileName}.html`;\n                a.click();\n            }\n        }\n\n        document.getElementById('editor').addEventListener('keydown', function (e) {\n    const editor = this;\n    if (e.key === ' ' && window.getSelection) {\n        const selection = window.getSelection();\n        if (!selection.rangeCount) return;\n\n        const range = selection.getRangeAt(0);\n        const node = range.startContainer;\n\n        if (node.nodeType === 3) { // text node\n            const text = node.textContent;\n            const beforeCursor = text.substring(0, range.startOffset);\n\n            if (beforeCursor.trim() === '-') {\n                e.preventDefault();\n\n                // Create list\n                const li = document.createElement('li');\n                li.innerHTML = '&nbsp;'; // Placeholder for user text\n\n                const ul = document.createElement('ul');\n                ul.appendChild(li);\n\n                const parent = node.parentNode;\n                parent.removeChild(node);\n\n                range.deleteContents();\n                range.insertNode(ul);\n\n                // Place cursor inside the new list item\n                const newRange = document.createRange();\n                newRange.setStart(li, 0);\n                newRange.collapse(true);\n                selection.removeAllRanges();\n                selection.addRange(newRange);\n            }\n        }\n    }\n});\n\n    </script>\n</body>\n</html>\n"
  },
  "AnimationProgram": {
    "file": "/pkgrepo/AnimationProgram.app",
    "icon": "animation.jpg",
    "description": "animation",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Object Manipulation with Camera Lock & Controlled Rotation</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/three/examples/js/controls/OrbitControls.js\"></script>\n <script src=\"assets.js\"></script>\n    <style>\n        body { margin: 0; overflow: hidden; }\n        canvas { display: block; }\n#menu {\n    display: none;\n    position: absolute;\n    top: 50px;\n    left: 50px;\n    background: rgba(30, 30, 30, 0.95);\n    padding: 15px;\n    border-radius: 8px;\n    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);\n    z-index: 100;\n    backdrop-filter: blur(5px);\n    min-width: 200px;\n    max-height: 300px; /* Restrict height */\n    overflow-y: auto; /* Enable vertical scrolling */\n    border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n/* Custom scrollbar */\n#menu::-webkit-scrollbar {\n    width: 8px;\n}\n\n#menu::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 10px;\n}\n\n#menu::-webkit-scrollbar-thumb {\n    background: rgba(255, 255, 255, 0.3);\n    border-radius: 10px;\n}\n\n#menu::-webkit-scrollbar-thumb:hover {\n    background: rgba(255, 255, 255, 0.5);\n}\n\n/* Buttons inside menu */\n#menu button {\n    display: block;\n    width: 100%;\n    padding: 10px;\n    margin: 5px 0;\n    background: linear-gradient(to bottom, #444, #222);\n    color: white;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 14px;\n    transition: all 0.2s ease-in-out;\n}\n\n#menu button:hover {\n    background: linear-gradient(to bottom, #666, #333);\n    border-color: rgba(255, 255, 255, 0.3);\n}\n\n#menu button:active {\n    background: linear-gradient(to bottom, #222, #111);\n    transform: scale(0.98);\n}\n\n/* Fade-in effect */\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: scale(0.95);\n    }\n    to {\n        opacity: 1;\n        transform: scale(1);\n    }\n}\n\n#menu {\n    animation: fadeIn 0.2s ease-in-out;\n}\n\n#timeline-container {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    z-index: 10;\n}\n\n\n#timeline {\n    display: flex;\n    align-items: center;\n    overflow-x: auto;\n    height: 120px;\n    border-top: 3px solid #666;\n    border-bottom: 3px solid #666;\n    padding: 5px;\n    background: #181818;\n    position: relative;\n}\n\n#timeline-header {\n    position: absolute;\n    top: -30px;\n    left: 10px;\n    font-size: 14px;\n    font-weight: bold;\n    color: #ccc;\n}\n\n#keyframes {\n    display: flex;\n    gap: 2px;\n    flex-grow: 1;\n    position: relative;\n}\n\n.keyframe {\n    width: 12px;\n    height: 30px;\n    background: linear-gradient(to bottom, #ff3c3c, #a30000);\n    border: 1px solid #700000;\n    border-radius: 2px;\n    cursor: pointer;\n    transition: transform 0.1s ease-in-out, background 0.2s;\n    box-shadow: 0px 0px 4px rgba(255, 0, 0, 0.8);\n}\n\n.keyframe:hover {\n    transform: scale(1.1);\n    background: linear-gradient(to bottom, #ff5555, #b30000);\n}\n\n#timeline-controls {\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n    margin-top: 5px;\n}\n\n#timeline-controls button {\n    padding: 6px 12px;\n    background: linear-gradient(to bottom, #292929, #1a1a1a);\n    color: white;\n    border: 1px solid #555;\n    border-radius: 3px;\n    cursor: pointer;\n    font-size: 14px;\n    transition: all 0.2s ease-in-out;\n}\n\n#timeline-controls button:hover {\n    background: linear-gradient(to bottom, #444, #222);\n    border-color: #777;\n}\n\n#timeline-tracks {\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    height: 80px;\n    border-top: 1px solid #333;\n}\n\n.timeline-track {\n    height: 40px;\n    border-bottom: 1px solid #333;\n    background: rgba(255, 255, 255, 0.05);\n    display: flex;\n    align-items: center;\n    padding: 0 5px;\n    position: relative;\n}\n\n.timeline-track:nth-child(even) {\n    background: rgba(255, 255, 255, 0.08);\n}\n\n.timeline-track-label {\n    color: #aaa;\n    font-size: 12px;\n    padding-right: 10px;\n    white-space: nowrap;\n}\n\n\n    </style>\n</head>\n<body>\n<div id=\"menu\"></div>\n<div id=\"timeline-container\">\n    <div id=\"timeline\">\n        <div id=\"timeline-header\">Animation Timeline</div>\n        <div id=\"timeline-controls\">\n            <button onclick=\"startRecording()\">üî¥ Record</button>\n            <button onclick=\"stopRecording()\">‚èπ Stop</button>\n            <button onclick=\"startPlayback()\">‚ñ∂ Play</button>\n            <button onclick=\"stopPlayback()\">‚è∏ Stop</button>\n    <button onclick=\"exportAnimation()\">Export Animation</button>\n    <button onclick=\"toggleMenu()\">üìç Add Object</button>\n     <button onclick=\"deleteLastObject()\">‚ùå Delete Last Object</button>\n     <button onclick=\"toggleCameraLock()\">Lock Camera</button>\n     \n\n        </div>\n<div id=\"timeline-tracks\"></div>\n\n        <div id=\"keyframes\"></div>\n    </div>\n\n</div>\n\n    <script>\n// Setup Scene\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// Orbit Controls\nconst orbitControls = new THREE.OrbitControls(camera, renderer.domElement);\ncamera.position.set(0, 5, 10);\norbitControls.update();\n\n// Helpers\nscene.add(new THREE.GridHelper(10, 10));\n\n// Lighting\nconst light = new THREE.DirectionalLight(0xffffff, 1);\nlight.position.set(5, 10, 5);\nscene.add(light);\n\n// Objects & Selection\nconst objects = [];\nconst raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();\nlet selectedObject = null;\nlet isDragging = false;\nlet isRotatingY = false;\nlet isRotatingX = false;\nlet cameraLocked = false;\n\n// Cache Menu Element\nconst menu = document.getElementById(\"menu\");\n\n// Event Listeners (Efficient Handling)\nwindow.addEventListener(\"mousemove\", onMouseMove);\nwindow.addEventListener(\"mousedown\", onMouseDown);\nwindow.addEventListener(\"mouseup\", () => (isDragging = false));\nwindow.addEventListener(\"keydown\", onKeyChange);\nwindow.addEventListener(\"keyup\", onKeyChange);\nwindow.addEventListener(\"message\", onMessage);\nwindow.addEventListener(\"keydown\", (event) => {\n    if (event.key.toLowerCase() === \"m\") toggleMenu();\n});\n\n\n// Mouse State Variables\nlet dragOffset = new THREE.Vector3();\nlet dragPlane = new THREE.Plane();\nlet dragIntersectPoint = new THREE.Vector3();\n\n// Update on Mouse Move\nfunction onMouseMove(event) {\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    if (!isDragging) {\n        raycaster.setFromCamera(mouse, camera);\n        document.body.style.cursor = raycaster.intersectObjects(objects).length > 0 ? \"pointer\" : \"default\";\n    } else if (selectedObject) {\n        handleObjectMovement(event);\n    }\n}\n\nfunction createSingleKeyframe(objId, index) {\n    if (!objects.length) {\n        alert(\"No objects in the scene to create a keyframe.\");\n        return;\n    }\n\n    const object = objects.find(obj => obj.userData.id === objId);\n    if (!object) return;\n\n    const frameData = {\n        position: { x: object.position.x, y: object.position.y, z: object.position.z },\n        rotation: { x: object.rotation.x, y: object.rotation.y, z: object.rotation.z },\n        timestamp: index\n    };\n\n    animationTimeline[objId][index] = frameData; // Store keyframe in the predefined slot\n\n    let keyframeElement = document.querySelector(`#track-${objId} .keyframe[data-index=\"${index}\"]`);\n    if (keyframeElement) {\n        keyframeElement.style.opacity = 1; // Make it visible\n        keyframeElement.style.background = \"linear-gradient(to bottom, #ff3c3c, #a30000)\";\n    }\n\n    console.log(`Keyframe added at slot ${index} for ${objId}`);\n}\n\n\n\n// Handle Smooth Dragging (Locks Y-Axis)\nlet isMovingVertical = false;\n\ndocument.addEventListener(\"keydown\", (event) => {\n    if (event.key.toLowerCase() === \"z\") {\n        isMovingVertical = true;\n    }\n});\n\ndocument.addEventListener(\"keyup\", (event) => {\n    if (event.key.toLowerCase() === \"z\") {\n        isMovingVertical = false;\n    }\n});\n\nfunction handleObjectMovement(event) {\n    if (isRotatingY) {\n        selectedObject.rotation.y += event.movementX * 0.02;\n    } else if (isRotatingX) {\n        selectedObject.rotation.x += event.movementY * 0.02;\n    } else {\n        raycaster.setFromCamera(mouse, camera);\n        if (raycaster.ray.intersectPlane(dragPlane, dragIntersectPoint)) {\n            if (isMovingVertical) {\n                selectedObject.position.y += event.movementY * -0.05; // Invert Y for natural movement\n            } else {\n                selectedObject.position.set(\n                    dragIntersectPoint.x - dragOffset.x,\n                    selectedObject.position.y,  // Y stays the same unless moving vertically\n                    dragIntersectPoint.z - dragOffset.z\n                );\n            }\n        }\n    }\n}\n\nfunction deleteLastObject() {\n    if (objects.length === 0) return;\n    const lastObject = objects.pop();\n    scene.remove(lastObject);\n}\n\n// On Mouse Down (Select Object & Set Dragging Plane)\nfunction onMouseDown(event) {\n    raycaster.setFromCamera(mouse, camera);\n    const intersects = raycaster.intersectObjects(objects, true);\n\n    if (intersects.length > 0) {\n        selectedObject = getRootObject(intersects[0].object);\n        isDragging = true;\n\n        // Ensure movement is locked to the XZ plane\n        dragPlane.set(new THREE.Vector3(0, 1, 0), selectedObject.position.y);\n\n        // Compute initial drag offset to prevent snapping\n        if (raycaster.ray.intersectPlane(dragPlane, dragIntersectPoint)) {\n            dragOffset.set(\n                dragIntersectPoint.x - selectedObject.position.x,\n                0, // Y offset not needed\n                dragIntersectPoint.z - selectedObject.position.z\n            );\n        }\n    } else {\n        selectedObject = null;\n    }\n}\n\n\n// Get Root Object (Avoid Unnecessary Loops)\nfunction getRootObject(object) {\n    while (object.parent && !(object.parent instanceof THREE.Scene)) {\n        if (object.parent instanceof THREE.Group) return object.parent;\n        object = object.parent;\n    }\n    return object;\n}\n\n// Key Events (One Function for Both Down/Up)\nfunction toggleCameraLock() {\n    cameraLocked = !cameraLocked;\n    orbitControls.enabled = !cameraLocked;\n}\n\nfunction onKeyChange(event) {\n    const isDown = event.type === \"keydown\";\n\n    switch (event.code) {\n        case \"CapsLock\":\n            toggleCameraLock();\n            break;\n        case \"ShiftLeft\":\n            isRotatingY = isDown;\n            break;\n        case \"AltLeft\":\n            isRotatingX = isDown;\n            break;\n    }\n}\n\n\n// Save Object State (Avoid Redundant Saves)\nfunction saveObjectState(object) {\n    if (!object || !object.userData.id) return;\n\n    const objectID = object.userData.id;\n    const newState = {\n        id: objectID,\n        position: { ...object.position },\n        rotation: { ...object.rotation },\n        timestamp: Date.now()\n    };\n\n    let objectStates = JSON.parse(localStorage.getItem(objectID)) || [];\n    const lastState = objectStates[objectStates.length - 1];\n\n    if (lastState && JSON.stringify(lastState) === JSON.stringify(newState)) return;\n    objectStates.push(newState);\n    localStorage.setItem(objectID, JSON.stringify(objectStates));\n}\n\n// Object Management\nlet objectCount = 0;\nfunction findAssetFunctions() {\n    return Object.keys(window).filter(key => key.startsWith(\"create\") && typeof window[key] === \"function\");\n}\n\nfunction addObject(type) {\n    if (typeof window[type] !== \"function\") return console.warn(\"Asset function not found:\", type);\n\n    try {\n        const object = window[type](new THREE.Vector3(0, 0, 0));\n        if (!(object instanceof THREE.Object3D)) return console.error(`Invalid object: ${type}`, object);\n\n        object.userData.id = `${type}_${objectCount++}`;\n        object.userData.functionName = type;\n        scene.add(object);\n        objects.push(object);\n        initializeKeyframes(object.userData.id); // Initialize 100 empty keyframe slots\n        restoreObjectStates();\n        window.parent.postMessage({ action: \"objectAdded\", objectType: type }, \"*\");\n    } catch (error) {\n        console.error(`Error adding object: ${type}`, error);\n    }\n\n    menu.style.display = \"none\";\n}\n\nfunction initializeKeyframes(objId) {\n    if (!animationTimeline[objId]) {\n        animationTimeline[objId] = new Array(100).fill(null); // Initialize 100 slots\n    }\n\n    let track = document.createElement(\"div\");\n    track.classList.add(\"timeline-track\");\n    track.id = `track-${objId}`;\n    track.innerHTML = `<span class=\"timeline-track-label\">${objId}</span>`;\n\n    for (let i = 0; i < 100; i++) {\n        const keyframe = document.createElement(\"div\");\n        keyframe.classList.add(\"keyframe\");\n        keyframe.dataset.index = i;\n        keyframe.style.opacity = 0.3; // Make it visually distinct as empty\n\n        keyframe.onclick = function () {\n            createSingleKeyframe(objId, i);\n        };\n\n        track.appendChild(keyframe);\n    }\n\n    document.getElementById(\"timeline-tracks\").appendChild(track);\n}\n\n// Toggle Menu\nfunction toggleMenu(forceOpen = false) {\n    if (!menu) return console.error(\"Menu element not found!\");\n\n    if (!forceOpen && menu.style.display === \"block\") {\n        menu.style.display = \"none\";\n        return;\n    }\n\n    menu.innerHTML = \"\";\n    const assetNames = findAssetFunctions();\n\n    if (assetNames.length === 0) {\n        menu.innerHTML = \"<p>No assets found.</p>\";\n    } else {\n        assetNames.forEach(assetName => {\n            const button = document.createElement(\"button\");\n            button.innerText = assetName;\n            button.onclick = () => addObject(assetName);\n            menu.appendChild(button);\n        });\n    }\n\n    menu.style.display = \"block\";\n}\n\n// Message Listener\nfunction onMessage(event) {\n    if (event.data.action === \"objectAdded\") {\n        console.log(\"Object added:\", event.data.objectType);\n        addObjectToTimeline(event.data.objectType);\n    } else if (event.data.action === \"triggerMKey\") {\n        console.log(\"Received message to trigger 'm' key event.\");\n        toggleMenu();\n    }\n}\n\n// Animation Loop\nfunction animate() {\n    requestAnimationFrame(animate);\n    renderer.render(scene, camera);\n}\nanimate();\n\n// Timeline for storing animation frames\nlet animationTimeline = {}; // Store keyframes per object\n\nlet isRecording = false;\nlet isPlaying = false;\nlet playbackIndex = 0;\nlet playbackInterval;\n\n// Start Recording\nfunction startRecording() {\n    animationTimeline = [];\n    document.getElementById(\"keyframes\").innerHTML = \"\"; // Clear timeline\n    isRecording = true;\n    console.log(\"Recording started...\");\n}\n\n// Stop Recording\nfunction stopRecording() {\n    isRecording = false;\n    console.log(\"Recording stopped.\");\n}\n\n// Save Object States\nfunction recordFrame() {\n    if (!isRecording) return;\n\n    const frameData = objects.map(obj => ({\n        id: obj.userData.id,\n        position: { x: obj.position.x, y: obj.position.y, z: obj.position.z },\n        rotation: { x: obj.rotation.x, y: obj.rotation.y, z: obj.rotation.z }\n    }));\n\n    animationTimeline.push(frameData);\n    createKeyframeElement(animationTimeline.length - 1);\n}\n\n// Create a Keyframe in the Timeline\nfunction createKeyframeElement(objId, index) {\n    let track = document.getElementById(`track-${objId}`);\n\n    if (!track) {\n        track = document.createElement(\"div\");\n        track.classList.add(\"timeline-track\");\n        track.id = `track-${objId}`;\n        track.innerHTML = `<span class=\"timeline-track-label\">${objId}</span>`;\n        document.getElementById(\"timeline-tracks\").appendChild(track);\n    }\n\n    const keyframe = document.createElement(\"div\");\n    keyframe.classList.add(\"keyframe\");\n    keyframe.dataset.index = index;\n\n    keyframe.onclick = function () {\n        editKeyframe(objId, index);\n    };\n\n    track.appendChild(keyframe);\n}\n\n\n// Open Keyframe Editor\nfunction editKeyframe(objId, index) {\n    const frame = animationTimeline[objId][index];\n    if (!frame) return;\n\n    const editor = document.createElement(\"div\");\n    editor.innerHTML = `\n        <div style=\"position: absolute; bottom: 100px; left: 50%; transform: translateX(-50%); background: white; padding: 10px; border-radius: 5px;\">\n            <h3>Edit Keyframe for ${objId}</h3>\n            <p>Position: (${frame.position.x.toFixed(2)}, ${frame.position.y.toFixed(2)}, ${frame.position.z.toFixed(2)})</p>\n            <button onclick=\"deleteKeyframe('${objId}', ${index})\">Delete Keyframe</button>\n            <button onclick=\"closeEditor(this)\">Close</button>\n        </div>\n    `;\n\n    document.body.appendChild(editor);\n}\n\n\n// Delete Keyframe\nfunction deleteKeyframe(objId, index) {\n    animationTimeline[objId].splice(index, 1);\n    document.getElementById(`track-${objId}`).children[index + 1].remove();\n}\n\n\n// Close Keyframe Editor\nfunction closeEditor(button) {\n    button.parentElement.remove();\n}\n\n// Start Playback\nfunction startPlayback() {\n    if (Object.keys(animationTimeline).length === 0) {\n        alert(\"No animation recorded.\");\n        return;\n    }\n\n    // Clear any existing interval before starting a new one\n    if (playbackInterval) {\n        clearInterval(playbackInterval);\n    }\n\n    isPlaying = true;\n    playbackIndex = 0;\n\n    // Get the total length of the longest animation sequence\n    const maxFrames = Math.max(...Object.values(animationTimeline).map(arr => arr.length));\n\n    // Set playback speed to 1/24 FPS (42ms per frame)\n    const frameDuration = 1000 / 24; // ~41.67ms ‚âà 42ms\n\n    playbackInterval = setInterval(() => {\n        Object.keys(animationTimeline).forEach(objId => {\n            const keyframes = animationTimeline[objId];\n\n            // If this object has no more keyframes, skip updating it\n            if (playbackIndex >= keyframes.length) return;\n\n            const frame = keyframes[playbackIndex];\n            const obj = objects.find(o => o.userData.id === objId);\n\n            if (obj) {\n                obj.position.set(frame.position.x, frame.position.y, frame.position.z);\n                obj.rotation.set(frame.rotation.x, frame.rotation.y, frame.rotation.z);\n            }\n        });\n\n        playbackIndex++;\n\n        // Stop playback when we reach the longest keyframe sequence\n        if (playbackIndex >= maxFrames) {\n            stopPlayback();\n        }\n    }, frameDuration);\n}\n\nfunction stopPlayback() {\n    isPlaying = false;\n    clearInterval(playbackInterval); // Stop interval properly\n}\n\n\n// Capture frames every 100ms\nsetInterval(recordFrame, 100);\n\nfunction exportAnimation() {\n    const json = JSON.stringify(animationTimeline, null, 2);\n    const blob = new Blob([json], { type: \"application/json\" });\n    const a = document.createElement(\"a\");\n    a.href = URL.createObjectURL(blob);\n    a.download = \"animation.json\";\n    a.click();\n}\n\nwindow.addEventListener('resize', () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n});\n\n\n\n    </script>\n</body>\n</html>\n"
  },
  "Colorcalibration": {
    "file": "/pkgrepo/Colorcalibration.app",
    "icon": "color.jpg",
    "description": "Calibrate your screen to match print quality of hex colors",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Intnix Color Calibrator</title>\n  <style>\n    html, body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      background: linear-gradient(to bottom right, #e2e8f0, #f8fafc);\n      font-family: 'Segoe UI', sans-serif;\n      color: #111;\n      overflow: hidden;\n    }\n\n    .container {\n      width: 100vw;\n      height: 100vh;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: flex-start;\n      padding: 3rem;\n      box-sizing: border-box;\n    }\n\n    h1 {\n      font-weight: 600;\n      font-size: 2rem;\n      color: #333;\n      margin-bottom: 2rem;\n      background: rgba(255, 255, 255, 0.6);\n      padding: 0.6rem 2rem;\n      border-radius: 14px;\n      box-shadow: 0 0 15px rgba(0,0,0,0.08);\n      backdrop-filter: blur(14px);\n    }\n\n    .inputs, .profile-row {\n      display: flex;\n      gap: 1rem;\n      margin-bottom: 1rem;\n      align-items: center;\n    }\n\n    input[type=\"color\"],\n    input[type=\"text\"],\n    select {\n      padding: 0.5rem;\n      border-radius: 8px;\n      border: none;\n      background: rgba(255, 255, 255, 0.8);\n      color: #333;\n      font-size: 1rem;\n      outline: none;\n      box-shadow: 0 0 5px rgba(0, 0, 0, 0.08);\n    }\n\n    button {\n      padding: 0.5rem 1rem;\n      font-size: 1rem;\n      border: none;\n      border-radius: 8px;\n      cursor: pointer;\n      background: #00adb5;\n      color: white;\n      box-shadow: 0 0 10px rgba(0,0,0,0.1);\n    }\n\n    .color-preview {\n      width: 60vw;\n      height: 40vh;\n      border-radius: 16px;\n      border: 2px solid rgba(0, 0, 0, 0.05);\n      transition: filter 0.2s ease;\n      margin-bottom: 2rem;\n    }\n\n    .sliders {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 1rem;\n      width: 60vw;\n    }\n\n    .slider-group {\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n      align-items: center;\n    }\n\n    .slider-group label {\n      width: 25%;\n      text-align: right;\n      margin-right: 1rem;\n    }\n\n    .slider-group input[type=\"range\"] {\n      width: 70%;\n    }\n\n    .desc {\n      margin-top: 2rem;\n      color: #444;\n      font-size: 0.9rem;\n      text-align: center;\n      background: rgba(255,255,255,0.6);\n      padding: 1rem;\n      border-radius: 12px;\n      box-shadow: 0 0 15px rgba(0,0,0,0.05);\n      backdrop-filter: blur(14px);\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>üé® Intnix Print Color Calibrator</h1>\n\n    <div class=\"inputs\">\n      <input type=\"color\" id=\"colorPicker\" value=\"#ff0000\">\n      <input type=\"text\" id=\"hexInput\" value=\"#ff0000\">\n    </div>\n\n    <div class=\"color-preview\" id=\"colorBox\"></div>\n\n    <div class=\"sliders\">\n      <div class=\"slider-group\">\n        <label for=\"brightness\">Brightness</label>\n        <input type=\"range\" id=\"brightness\" min=\"0\" max=\"200\" value=\"100\">\n      </div>\n      <div class=\"slider-group\">\n        <label for=\"contrast\">Contrast</label>\n        <input type=\"range\" id=\"contrast\" min=\"0\" max=\"200\" value=\"100\">\n      </div>\n      <div class=\"slider-group\">\n        <label for=\"saturation\">Saturation</label>\n        <input type=\"range\" id=\"saturation\" min=\"0\" max=\"200\" value=\"100\">\n      </div>\n    </div>\n\n    <div class=\"profile-row\">\n      <input type=\"text\" id=\"profileName\" placeholder=\"Profile name\">\n      <button onclick=\"saveProfile()\">üíæ Save</button>\n      <select id=\"profileSelect\" onchange=\"loadProfile()\">\n        <option value=\"\">‚¨á Load Profile</option>\n      </select>\n      <button onclick=\"deleteProfile()\">üóë Delete</button>\n    </div>\n\n    <div class=\"desc\">\n      Match the selected color with your printed version using the sliders. Save your calibration profile and apply it to all colors system-wide.\n    </div>\n  </div>\n\n  <script>\n    const colorPicker = document.getElementById(\"colorPicker\");\n    const hexInput = document.getElementById(\"hexInput\");\n    const colorBox = document.getElementById(\"colorBox\");\n\n    const brightnessSlider = document.getElementById(\"brightness\");\n    const contrastSlider = document.getElementById(\"contrast\");\n    const saturationSlider = document.getElementById(\"saturation\");\n\n    const profileNameInput = document.getElementById(\"profileName\");\n    const profileSelect = document.getElementById(\"profileSelect\");\n\n    function updateColorBox() {\n      const hex = hexInput.value;\n      colorBox.style.backgroundColor = hex;\n\n      const brightness = brightnessSlider.value;\n      const contrast = contrastSlider.value;\n      const saturation = saturationSlider.value;\n\n      colorBox.style.filter = `\n        brightness(${brightness}%)\n        contrast(${contrast}%)\n        saturate(${saturation}%)\n      `;\n    }\n\n    colorPicker.addEventListener(\"input\", e => {\n      hexInput.value = e.target.value;\n      updateColorBox();\n    });\n\n    hexInput.addEventListener(\"input\", e => {\n      colorPicker.value = e.target.value;\n      updateColorBox();\n    });\n\n    [brightnessSlider, contrastSlider, saturationSlider].forEach(slider => {\n      slider.addEventListener(\"input\", updateColorBox);\n    });\n\n    function saveProfile() {\n      const name = profileNameInput.value.trim();\n      if (!name) return alert(\"Enter a profile name.\");\n      const profile = {\n        brightness: brightnessSlider.value,\n        contrast: contrastSlider.value,\n        saturation: saturationSlider.value\n      };\n      localStorage.setItem(\"profile:\" + name, JSON.stringify(profile));\n      refreshProfiles();\n      alert(\"‚úÖ Profile saved: \" + name);\n    }\n\n    function loadProfile() {\n      const name = profileSelect.value;\n      if (!name) return;\n      const profile = JSON.parse(localStorage.getItem(\"profile:\" + name));\n      if (!profile) return;\n      brightnessSlider.value = profile.brightness;\n      contrastSlider.value = profile.contrast;\n      saturationSlider.value = profile.saturation;\n      updateColorBox();\n    }\n\n    function deleteProfile() {\n      const name = profileSelect.value;\n      if (!name) return;\n      localStorage.removeItem(\"profile:\" + name);\n      refreshProfiles();\n      alert(\"üóë Deleted profile: \" + name);\n    }\n\n    function refreshProfiles() {\n      const keys = Object.keys(localStorage);\n      profileSelect.innerHTML = `<option value=\"\">‚¨á Load Profile</option>`;\n      keys.forEach(key => {\n        if (key.startsWith(\"profile:\")) {\n          const name = key.split(\":\")[1];\n          const option = document.createElement(\"option\");\n          option.value = name;\n          option.textContent = name;\n          profileSelect.appendChild(option);\n        }\n      });\n    }\n\n    refreshProfiles();\n    updateColorBox();\n  </script>\n</body>\n</html>\n"
  },
  "Unzip": {
    "file": "/pkgrepo/Unzip.app",
    "icon": "unzip.jpg",
    "description": "Unzip zip folders and create download links",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\n<html>\n<head>\n  <title>ZIP Viewer</title>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js\"></script>\n  <style>\n    body {\n      font-family: 'Segoe UI', sans-serif;\n      background: #f4f4f4;\n      padding: 40px;\n      color: #333;\n    }\n\n    h2 {\n      margin-bottom: 10px;\n    }\n\n    input[type=\"file\"] {\n      padding: 10px;\n      border: 2px dashed #ccc;\n      background: white;\n      width: 100%;\n      max-width: 400px;\n      margin-bottom: 20px;\n      cursor: pointer;\n    }\n\n    .file-list {\n      display: flex;\n      flex-direction: column;\n      gap: 10px;\n    }\n\n    .file-card {\n      background: white;\n      padding: 15px;\n      border-radius: 10px;\n      box-shadow: 0 4px 10px rgba(0,0,0,0.05);\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    }\n\n    .file-info {\n      display: flex;\n      align-items: center;\n      gap: 15px;\n    }\n\n    .file-icon {\n      font-size: 24px;\n    }\n\n    .file-name {\n      font-weight: 600;\n    }\n\n    .file-size {\n      font-size: 14px;\n      color: #666;\n    }\n\n    .download-btn {\n      background: #007bff;\n      color: white;\n      padding: 8px 14px;\n      border: none;\n      border-radius: 6px;\n      cursor: pointer;\n      text-decoration: none;\n      font-size: 14px;\n      transition: background 0.2s ease;\n    }\n\n    .download-btn:hover {\n      background: #0056b3;\n    }\n\n    #fileList h3 {\n      margin-top: 30px;\n    }\n  </style>\n</head>\n<body>\n  <h2>Upload a ZIP File</h2>\n  <input type=\"file\" id=\"zipInput\" accept=\".zip\" />\n  <div id=\"fileList\">\n    <h3>Contents:</h3>\n    <div class=\"file-list\" id=\"filesContainer\"></div>\n  </div>\n\n  <script>\n    function formatBytes(bytes) {\n      if (bytes === 0) return '0 B';\n      const k = 1024;\n      const sizes = ['B', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    document.getElementById('zipInput').addEventListener('change', function(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      const reader = new FileReader();\n      reader.onload = function(e) {\n        JSZip.loadAsync(e.target.result).then(zip => {\n          const filesContainer = document.getElementById('filesContainer');\n          filesContainer.innerHTML = '';\n\n          Object.keys(zip.files).forEach(filename => {\n            const zipEntry = zip.files[filename];\n\n            if (!zipEntry.dir) {\n              zipEntry.async('blob').then(blob => {\n                const url = URL.createObjectURL(blob);\n                const size = formatBytes(blob.size);\n\n                const card = document.createElement('div');\n                card.className = 'file-card';\n\n                const info = document.createElement('div');\n                info.className = 'file-info';\n\n                const icon = document.createElement('div');\n                icon.className = 'file-icon';\n                icon.textContent = 'üìÑ';\n\n                const nameSize = document.createElement('div');\n                const name = document.createElement('div');\n                name.className = 'file-name';\n                name.textContent = filename;\n\n                const fileSize = document.createElement('div');\n                fileSize.className = 'file-size';\n                fileSize.textContent = size;\n\n                nameSize.appendChild(name);\n                nameSize.appendChild(fileSize);\n\n                info.appendChild(icon);\n                info.appendChild(nameSize);\n\n                const download = document.createElement('a');\n                download.href = url;\n                download.download = filename;\n                download.className = 'download-btn';\n                download.textContent = 'Download';\n\n                card.appendChild(info);\n                card.appendChild(download);\n                filesContainer.appendChild(card);\n              });\n            }\n          });\n        });\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  </script>\n</body>\n</html>\n"
  },
  "paint": {
    "file": "/pkgrepo/paint.app",
    "icon": "paint.jpg",
    "description": "basic paint app",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Web Paint</title>\n  <style>\n    :root {\n      --toolbar-bg: #f5f5f5;\n      --toolbar-border: #ddd;\n      --button-bg: #fff;\n      --button-active-bg: #e0e0e0;\n      --button-hover-bg: #f0f0f0;\n      --primary-color: #333;\n      --shadow: rgba(0, 0, 0, 0.05);\n    }\n    *, *::before, *::after { box-sizing: border-box; }\n    body {\n      margin: 0;\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      font-family: 'Segoe UI', Tahoma, sans-serif;\n      color: var(--primary-color);\n    }\n    #toolbar {\n      display: flex;\n      align-items: center;\n      padding: 0.5rem 1rem;\n      background: var(--toolbar-bg);\n      border-bottom: 1px solid var(--toolbar-border);\n      box-shadow: 0 2px 4px var(--shadow);\n    }\n    .tool-group { display: flex; align-items: center; margin-right: 1.5rem; }\n    .tool-button {\n      background: var(--button-bg);\n      border: 1px solid var(--toolbar-border);\n      padding: 0.3rem 0.6rem;\n      margin-right: 0.5rem;\n      border-radius: 4px;\n      cursor: pointer;\n      transition: background 0.2s;\n      font-size: 1rem;\n      display: flex; align-items: center;\n    }\n    .tool-button:hover { background: var(--button-hover-bg); }\n    .tool-button.active { background: var(--button-active-bg); border-color: var(--primary-color); }\n    #canvas { flex: 1; cursor: crosshair; display: block; }\n    input[type=\"range\"], input[type=\"number\"], select { margin-left: 0.5rem; }\n    label { font-size: 0.9rem; margin-left: 0.5rem; }\n  </style>\n</head>\n<body>\n  <div id=\"toolbar\">\n    <div class=\"tool-group\">\n      <input type=\"color\" id=\"colorPicker\" value=\"#000000\" title=\"Select Color\">\n      <label for=\"sizePicker\">Brush Size</label>\n      <input type=\"range\" id=\"sizePicker\" min=\"1\" max=\"50\" value=\"5\">\n      <label for=\"fontSizePicker\">Font Size</label>\n      <input type=\"number\" id=\"fontSizePicker\" min=\"8\" max=\"72\" value=\"20\" style=\"width:4ch;\">\n      <label for=\"fontFamilyPicker\">Font</label>\n      <select id=\"fontFamilyPicker\">\n        <option value=\"Segoe UI\">Segoe UI</option>\n        <option value=\"Arial\">Arial</option>\n        <option value=\"Times New Roman\">Times New Roman</option>\n        <option value=\"Courier New\">Courier New</option>\n      </select>\n    </div>\n    <div class=\"tool-group\">\n      <button class=\"tool-button active\" id=\"pencil\" title=\"Pencil\">‚úèÔ∏è</button>\n      <button class=\"tool-button\" id=\"line\" title=\"Line\">üìè</button>\n      <button class=\"tool-button\" id=\"rect\" title=\"Rectangle\">‚¨õ</button>\n      <button class=\"tool-button\" id=\"circle\" title=\"Circle\">‚ö™</button>\n      <button class=\"tool-button\" id=\"eraser\" title=\"Eraser\">üßΩ</button>\n      <button class=\"tool-button\" id=\"fill\" title=\"Fill\">ü™£</button>\n      <button class=\"tool-button\" id=\"move\" title=\"Move\">üñêÔ∏è</button>\n      <button class=\"tool-button\" id=\"text\" title=\"Text\">üÖ∞Ô∏è</button>\n    </div>\n    <div class=\"tool-group\">\n      <button class=\"tool-button\" id=\"clear\" title=\"Clear Canvas\">üóëÔ∏è</button>\n      <button class=\"tool-button\" id=\"save\" title=\"Save as PNG\">üíæ</button>\n    </div>\n  </div>\n  <canvas id=\"canvas\"></canvas>\n  <script>\n  (() => {\n    const canvas = document.getElementById('canvas'), ctx = canvas.getContext('2d');\n    const colorPicker = document.getElementById('colorPicker');\n    const sizePicker = document.getElementById('sizePicker');\n    const fontSizePicker = document.getElementById('fontSizePicker');\n    const fontFamilyPicker = document.getElementById('fontFamilyPicker');\n    let currentTool = 'pencil', drawing = false;\n    let startX=0, startY=0, snapshot=null;\n    let selection=null, selImage=null, selecting=false;\n    let moving=false, moveOffset={x:0,y:0};\n    const toolbarH=document.getElementById('toolbar').offsetHeight;\n    const resize=()=>{canvas.width=window.innerWidth;canvas.height=window.innerHeight-toolbarH;};\n    window.addEventListener('resize',resize); resize();\n    document.querySelectorAll('.tool-button').forEach(btn=>{\n      btn.addEventListener('click',()=>{\n        document.querySelectorAll('.tool-button').forEach(b=>b.classList.remove('active'));\n        btn.classList.add('active'); currentTool=btn.id;\n        selecting=false; moving=false; selection=null;\n      });\n    });\n    const pos=e=>({x:e.offsetX,y:e.offsetY});\n    canvas.addEventListener('mousedown',e=>{\n      const {x,y}=pos(e);\n      if(currentTool==='text'){ createInput(x,y); return; }\n      drawing=true; startX=x; startY=y;\n      if(currentTool==='fill'){ flood(x,y); drawing=false; }\n      else if(['line','rect','circle'].includes(currentTool)) snapshot=ctx.getImageData(0,0,canvas.width,canvas.height);\n      else if(currentTool==='move'){\n        if(!selection){ selecting=true; snapshot=ctx.getImageData(0,0,canvas.width,canvas.height); }\n        else{ moving=true; moveOffset.x=x-selection.x; moveOffset.y=y-selection.y; }\n      }\n    });\n    canvas.addEventListener('mousemove',e=>{\n      if(!drawing) return; const {x,y}=pos(e);\n      if(['pencil','eraser'].includes(currentTool)){\n        ctx.beginPath(); ctx.moveTo(startX,startY); ctx.lineTo(x,y);\n        ctx.strokeStyle=currentTool==='eraser'?'#fff':colorPicker.value;\n        ctx.lineWidth=sizePicker.value; ctx.lineCap='round'; ctx.stroke();\n        startX=x; startY=y;\n      } else if(['line','rect','circle'].includes(currentTool)){\n        ctx.putImageData(snapshot,0,0); drawShape(startX,startY,x,y);\n      } else if(currentTool==='move'){\n        ctx.putImageData(snapshot,0,0);\n        if(selecting){ drawSel(startX,startY,x,y); }\n        else if(moving){ ctx.putImageData(selImage,x-moveOffset.x,y-moveOffset.y); }\n      }\n    });\n    canvas.addEventListener('mouseup',e=>{\n      if(!drawing) return; const {x,y}=pos(e);\n      if(['line','rect','circle'].includes(currentTool)){\n        ctx.putImageData(snapshot,0,0); drawShape(startX,startY,x,y,true); snapshot=null;\n      } else if(currentTool==='move'){\n        if(selecting){ selection=normalize(startX,startY,x,y);\n          selImage=ctx.getImageData(selection.x,selection.y,selection.w,selection.h);\n          ctx.putImageData(snapshot,0,0);\n          ctx.clearRect(selection.x,selection.y,selection.w,selection.h);\n          selecting=false;\n        } else if(moving){ ctx.putImageData(snapshot,0,0);\n          ctx.putImageData(selImage,x-moveOffset.x,y-moveOffset.y);\n          selection.x=x-moveOffset.x; selection.y=y-moveOffset.y;\n          snapshot=ctx.getImageData(0,0,canvas.width,canvas.height);\n          moving=false;\n        }\n      }\n      drawing=false;\n    });\n    document.getElementById('clear').addEventListener('click',()=>ctx.clearRect(0,0,canvas.width,canvas.height));\n    document.getElementById('save').addEventListener('click',()=>{\n      const a=document.createElement('a'); a.download='drawing.png'; a.href=canvas.toDataURL(); a.click();\n    });\n    function drawShape(x1,y1,x2,y2,commit){ ctx.beginPath(); ctx.strokeStyle=colorPicker.value; ctx.lineWidth=sizePicker.value;\n      if(currentTool==='line'){ ctx.moveTo(x1,y1); ctx.lineTo(x2,y2); }\n      if(currentTool==='rect'){ ctx.rect(x1,y1,x2-x1,y2-y1); }\n      if(currentTool==='circle'){ const r=Math.hypot(x2-x1,y2-y1); ctx.arc(x1,y1,r,0,2*Math.PI); }\n      ctx.stroke(); }\n    function drawSel(x1,y1,x2,y2){ const r=normalize(x1,y1,x2,y2);\n      ctx.setLineDash([6]); ctx.strokeStyle='#666'; ctx.strokeRect(r.x,r.y,r.w,r.h); ctx.setLineDash([]);\n    }\n    function normalize(x1,y1,x2,y2){ const x=Math.min(x1,x2), y=Math.min(y1,y2);\n      return {x,y,w:Math.abs(x2-x1),h:Math.abs(y2-y1)}; }\n    function createInput(x,y){ const inp=document.createElement('input'); inp.type='text';\n      inp.style.position='absolute'; inp.style.left=`${x}px`; inp.style.top=`${y+toolbarH}px`;\n      inp.style.font=`${fontSizePicker.value}px ${fontFamilyPicker.value}`;\n      document.body.appendChild(inp); inp.focus();\n      inp.addEventListener('keydown',e=>{ if(e.key==='Enter') inp.blur(); });\n      inp.addEventListener('blur',()=>{ const t=inp.value;\n        if(t){ ctx.font=`${fontSizePicker.value}px ${fontFamilyPicker.value}`; ctx.fillStyle=colorPicker.value;\n          ctx.fillText(t,x,y);\n        }\n        document.body.removeChild(inp);\n      }); }\n    function flood(x,y){ const img=ctx.getImageData(0,0,canvas.width,canvas.height),px=img.data,w=img.width;\n      const i=(y*w+x)*4,base=px.slice(i,i+4).join(','),fc=hexToRGBA(colorPicker.value);\n      if(base===`${fc.r},${fc.g},${fc.b},255`) return; const s=[[x,y]];\n      while(s.length){ const [cx,cy]=s.pop(),j=(cy*w+cx)*4;\n        if(px.slice(j,j+4).join(',')!==base) continue;\n        px[j]=fc.r;px[j+1]=fc.g;px[j+2]=fc.b;px[j+3]=255;\n        if(cx>0) s.push([cx-1,cy]); if(cx<w-1) s.push([cx+1,cy]);\n        if(cy>0) s.push([cx,cy-1]); if(cy<img.height-1) s.push([cx,cy+1]);\n      }\n      ctx.putImageData(img,0,0);\n    }\n    function hexToRGBA(h){ return {r:parseInt(h.slice(1,3),16),g:parseInt(h.slice(3,5),16),b:parseInt(h.slice(5,7),16),a:255}; }\n  })();\n  </script>\n</body>\n</html>\n"
  },
  "PDFHighlighter": {
    "file": "/pkgrepo/PDFHighlighter.app",
    "icon": "pdf.jpg",
    "description": "Hghlight PDF Documents",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n  <title>Enhanced PDF Viewer with PDF Annotation</title>\r\n  <!-- PDF.js -->\r\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js\"></script>\r\n  <!-- JSZip -->\r\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js\"></script>\r\n  <style>\r\n    body {\r\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n      background-color: #1c1c1e;\r\n      margin: 0;\r\n      padding: 20px;\r\n      color: #ffffff;\r\n    }\r\n\r\n    h2 {\r\n      text-align: center;\r\n      color: #ffffff;\r\n    }\r\n\r\n    #pdf-container {\r\n      position: relative;\r\n      width: 80%;\r\n      margin: 20px auto;\r\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n      border-radius: 12px;\r\n      overflow: hidden;\r\n      background-color: #2c2c2e;\r\n    }\r\n\r\n    canvas {\r\n      display: block;\r\n    }\r\n\r\n    #highlight-canvas {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      pointer-events: none;\r\n    }\r\n\r\n    #controls {\r\n      text-align: center;\r\n      margin: 20px 0;\r\n    }\r\n\r\n    #controls button {\r\n      background-color: #007aff;\r\n      color: white;\r\n      border: none;\r\n      padding: 10px 20px;\r\n      margin: 5px;\r\n      border-radius: 8px;\r\n      font-size: 14px;\r\n      cursor: pointer;\r\n      transition: background-color 0.2s;\r\n    }\r\n\r\n    #controls button:hover {\r\n      background-color: #005bb5;\r\n    }\r\n\r\n    #controls input[type=\"range\"] {\r\n      width: 150px;\r\n      margin: 0 10px;\r\n    }\r\n\r\n    #page-info {\r\n      font-size: 16px;\r\n      margin: 0 10px;\r\n      color: #ffffff;\r\n    }\r\n \r\n#upload-label {\r\n  display: block;\r\n  margin: 20px auto;\r\n  padding: 10px 20px;\r\n  background-color: #007aff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  width: fit-content;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n#upload-label:hover {\r\n  background-color: #005bb5;\r\n}\r\n\r\n\r\n    #upload-pdf {\r\n      display: block;\r\n      margin: 20px auto;\r\n      padding: 10px 20px;\r\n      background-color: #007aff;\r\n      color: white;\r\n      border: none;\r\n      border-radius: 8px;\r\n      font-size: 14px;\r\n      cursor: pointer;\r\n      transition: background-color 0.2s;\r\n    }\r\n\r\n    #upload-pdf:hover {\r\n      background-color: #005bb5;\r\n    }\r\n\r\n    .highlight-mode {\r\n      cursor: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"yellow\" opacity=\"0.5\"><path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"/></svg>') 0 16, auto;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <h2>Enhanced PDF Viewer</h2>\r\n<label for=\"upload-pdf\" id=\"upload-label\">Upload PDF</label>\r\n<input type=\"file\" id=\"upload-pdf\" accept=\"application/pdf\" style=\"display: none;\">\r\n\r\n  <div id=\"controls\">\r\n    <button onclick=\"prevPage()\">Previous</button>\r\n    <span id=\"page-info\">Page: 1</span>\r\n    <button onclick=\"nextPage()\">Next</button>\r\n    <input type=\"range\" id=\"zoom\" min=\"0.5\" max=\"3\" step=\"0.1\" value=\"1.5\" onchange=\"updateZoom()\" />\r\n    <button onclick=\"toggleHighlightMode()\">Toggle Highlight Mode</button>\r\n\r\n \r\n    <button onclick=\"saveHighlights()\">Save Highlights</button>\r\n  </div>\r\n  <div id=\"pdf-container\">\r\n    <canvas id=\"pdf-canvas\"></canvas>\r\n    <canvas id=\"highlight-canvas\"></canvas>\r\n  </div>\r\n\r\n  <script>\r\nlet pdfDoc = null,\r\n    pageNum = 1,\r\n    scale = 1.5,\r\n    canvas = document.getElementById(\"pdf-canvas\"),\r\n    ctx = canvas.getContext(\"2d\"),\r\n    highlightCanvas = document.getElementById(\"highlight-canvas\"),\r\n    highlightCtx = highlightCanvas.getContext(\"2d\"),\r\n    highlighting = false,\r\n    drawing = false,\r\n    highlights = [],\r\n    currentHighlight = null;\r\n\r\n// Load PDF file and render first page.\r\ndocument.getElementById(\"upload-pdf\").addEventListener(\"change\", function (event) {\r\n  let file = event.target.files[0];\r\n  if (file) {\r\n    let fileReader = new FileReader();\r\n    fileReader.onload = function () {\r\n      let typedarray = new Uint8Array(this.result);\r\n      pdfjsLib.getDocument(typedarray).promise.then(pdf => {\r\n        pdfDoc = pdf;\r\n        pageNum = 1;\r\n        document.getElementById(\"page-info\").textContent = `Page: 1 / ${pdfDoc.numPages}`;\r\n        renderPage(pageNum);\r\n        highlights = [];\r\n        highlightCtx.clearRect(0, 0, highlightCanvas.width, highlightCanvas.height);\r\n      });\r\n    };\r\n    fileReader.readAsArrayBuffer(file);\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\nfunction renderPage(num) {\r\n  pdfDoc.getPage(num).then(page => {\r\n    let viewport = page.getViewport({ scale });\r\n    canvas.width = viewport.width;\r\n    canvas.height = viewport.height;\r\n    highlightCanvas.width = viewport.width;\r\n    highlightCanvas.height = viewport.height;\r\n    highlightCanvas.style.pointerEvents = highlighting ? \"auto\" : \"none\";\r\n    let renderContext = { canvasContext: ctx, viewport: viewport };\r\n    page.render(renderContext).promise.then(() => {\r\n      redrawHighlights();\r\n    });\r\n  });\r\n}\r\n\r\nfunction redrawHighlights() {\r\n  highlightCtx.clearRect(0, 0, highlightCanvas.width, highlightCanvas.height);\r\n  highlights.forEach(h => {\r\n    if (h.page === pageNum) {\r\n      highlightCtx.beginPath();\r\n      highlightCtx.strokeStyle = \"yellow\";\r\n      highlightCtx.lineWidth = 5;\r\n      highlightCtx.globalAlpha = 0.5;\r\n      highlightCtx.moveTo(h.startX, h.startY);\r\n      highlightCtx.lineTo(h.endX, h.endY);\r\n      highlightCtx.stroke();\r\n      highlightCtx.closePath();\r\n    }\r\n  });\r\n}\r\n\r\nfunction toggleHighlightMode() {\r\n  highlighting = !highlighting;\r\n  if (highlighting) {\r\n    highlightCanvas.classList.add(\"highlight-mode\");\r\n    highlightCanvas.style.pointerEvents = \"auto\";\r\n  } else {\r\n    highlightCanvas.classList.remove(\"highlight-mode\");\r\n    highlightCanvas.style.pointerEvents = \"none\";\r\n  }\r\n}\r\n\r\nhighlightCanvas.addEventListener(\"mousedown\", (event) => {\r\n  if (highlighting) {\r\n    drawing = true;\r\n    currentHighlight = { page: pageNum, startX: event.offsetX, startY: event.offsetY, endX: event.offsetX, endY: event.offsetY };\r\n    highlightCtx.beginPath();\r\n    highlightCtx.moveTo(event.offsetX, event.offsetY);\r\n  }\r\n});\r\n\r\nhighlightCanvas.addEventListener(\"mouseup\", () => {\r\n  if (drawing && currentHighlight) {\r\n    drawing = false;\r\n    highlights.push(currentHighlight);\r\n    currentHighlight = null;\r\n  }\r\n});\r\n\r\nhighlightCanvas.addEventListener(\"mousemove\", (event) => {\r\n  if (!drawing || !highlighting) return;\r\n  currentHighlight.endX = event.offsetX;\r\n  currentHighlight.endY = event.offsetY;\r\n  redrawHighlights();\r\n  highlightCtx.beginPath();\r\n  highlightCtx.strokeStyle = \"yellow\";\r\n  highlightCtx.lineWidth = 5;\r\n  highlightCtx.globalAlpha = 0.5;\r\n  highlightCtx.moveTo(currentHighlight.startX, currentHighlight.startY);\r\n  highlightCtx.lineTo(currentHighlight.endX, currentHighlight.endY);\r\n  highlightCtx.stroke();\r\n  highlightCtx.closePath();\r\n});\r\n\r\nfunction nextPage() {\r\n  if (pageNum < pdfDoc.numPages) {\r\n    pageNum++;\r\n    renderPage(pageNum);\r\n    document.getElementById(\"page-info\").textContent = `Page: ${pageNum} / ${pdfDoc.numPages}`;\r\n  }\r\n}\r\n\r\nfunction prevPage() {\r\n  if (pageNum > 1) {\r\n    pageNum--;\r\n    renderPage(pageNum);\r\n    document.getElementById(\"page-info\").textContent = `Page: ${pageNum} / ${pdfDoc.numPages}`;\r\n  }\r\n}\r\n\r\n\r\nfunction updateZoom() {\r\n  scale = parseFloat(document.getElementById(\"zoom\").value);\r\n  renderPage(pageNum);\r\n}\r\n\r\nasync function saveHighlights() {\r\n  console.log(\"Save highlights function called.\");\r\n  if (!pdfDoc) {\r\n    console.log(\"No PDF document loaded.\");\r\n    return;\r\n  }\r\n  let zip = new JSZip();\r\n  let promises = [];\r\n  for (let i = 1; i <= pdfDoc.numPages; i++) {\r\n    promises.push(\r\n      new Promise((resolve) => {\r\n        pdfDoc.getPage(i).then(page => {\r\n          let viewport = page.getViewport({ scale });\r\n          let canvas = document.createElement(\"canvas\");\r\n          canvas.width = viewport.width;\r\n          canvas.height = viewport.height;\r\n          let ctx = canvas.getContext(\"2d\");\r\n          let renderContext = { canvasContext: ctx, viewport: viewport };\r\n          page.render(renderContext).promise.then(() => {\r\n            redrawHighlightsForPage(ctx, i);\r\n            canvas.toBlob(blob => {\r\n              zip.file(`page${i}.png`, blob);\r\n              console.log(`Page ${i} added to ZIP file.`);\r\n              resolve();\r\n            });\r\n          });\r\n        });\r\n      })\r\n    );\r\n  }\r\n  Promise.all(promises).then(() => {\r\n    zip.generateAsync({ type: \"blob\" }).then(content => {\r\n      let link = document.createElement(\"a\");\r\n      link.href = URL.createObjectURL(content);\r\n      link.download = \"highlighted_pages.zip\";\r\n      link.click();\r\n      console.log(\"ZIP file generated and download started.\");\r\n    });\r\n  });\r\n}\r\n\r\nfunction redrawHighlightsForPage(ctx, pageNum) {\r\n  highlights.forEach(h => {\r\n    if (h.page === pageNum) {\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"yellow\";\r\n      ctx.lineWidth = 5;\r\n      ctx.globalAlpha = 0.5;\r\n      ctx.moveTo(h.startX, h.startY);\r\n      ctx.lineTo(h.endX, h.endY);\r\n      ctx.stroke();\r\n      ctx.closePath();\r\n      console.log(`Highlight drawn on page ${pageNum}.`);\r\n    }\r\n  });\r\n}\r\n  </script>\r\n</body>\r\n</html>\r\n\r\n"
  },
  "CodeEditor": {
    "file": "/pkgrepo/CodeEditor.app",
    "icon": "text.jpg",
    "description": "Code Editor",
    "version": "1",
    "type": "html",
    "content": "<!DOCTYPE html>\n<html>\n<head>\n  <!-- Prism CSS Theme -->\n<link href=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\n\n<!-- Prism Core + JS language -->\n<script src=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-javascript.min.js\"></script>\n\n  <meta charset=\"UTF-8\" />\n  <title>NebulaCode Editor</title>\n  <style>\n  body, html {\n  margin: 0;\n  padding: 0;\n  height: 100%;\n  background: #0a0a0f;\n  font-family: 'Fira Code', monospace;\n  color: #e0e0e0;\n}\n\n.element-0 {\n  position: absolute;\n  top: 14%;\n  left: 36%;\n  width: 60%;\n  height: 83%;\n  background: #11111a;\n  border-radius: 12px;\n  box-shadow: 0 0 20px rgba(120, 100, 255, 0.2);\n  overflow: hidden;\n}\n\n.code-container {\n  display: flex;\n  height: 100%;\n  overflow: hidden;\n}\n\n#lineNumbers {\n  width: 40px;\n  padding: 14px 6px 14px 0;\n  background: #161622;\n  color: #888;\n  font-family: 'Fira Code', monospace;\n  font-size: 14px;\n  line-height: 1.5;\n  text-align: right;\n  white-space: pre;\n  user-select: none;\n  overflow: hidden;\n}\n\n#editor {\n  flex: 1;\n  padding: 14px;\n  background: #1e1e1e;\n  color: #fff;\n  font-family: 'Fira Code', monospace;\n  font-size: 14px;\n  line-height: 1.5;\n  overflow-y: auto;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  outline: none;\n}\n\n\n\n#highlighted {\n  flex: 1;\n  background: rgba(255, 255, 255, 0.04);\n  backdrop-filter: blur(12px);\n  -webkit-backdrop-filter: blur(12px);\n  color: white;\n  padding: 14px;\n  font-family: 'Fira Code', monospace;\n  font-size: 14px;\n  line-height: 1.5;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  overflow: auto;\n  pointer-events: none;\n  z-index: 1;\n}\n\n#highlighted code {\n  display: block;\n}\n\n\n\n\n\n.element-1 {\n  position: absolute;\n  top: 14%;\n  left: 1%;\n  width: 33%;\n  height: 83%;\n  background: #12121c;\n  border-radius: 12px;\n  overflow-y: auto;\n  padding: 12px;\n  box-shadow: 0 0 12px rgba(100, 255, 240, 0.15);\n}\n\n.element-2 {\n  position: absolute;\n  top: 10%;\n  left: 16%;\n  width: 60%;\n  height: 3.5%;\n  background: transparent;\n  color: #9fdfff;\n  font-size: 13px;\n  font-weight: 500;\n  padding-left: 14px;\n  display: flex;\n  align-items: center;\n}\n\n.element-3 {\n  position: absolute;\n  top: 4%;\n  left: 36%;\n  width: auto;\n  padding: 8px 16px;\n  background: #202036;\n  color: #ffffff;\n  font-size: 15px;\n  font-weight: bold;\n  border-radius: 8px;\n  box-shadow: 0 0 8px rgba(120, 100, 255, 0.4);\n}\n\n.element-4 {\n  position: absolute;\n  top: 4%;\n  left: 54%;\n  display: flex;\n  gap: 12px;\n}\n\ntextarea {\n  width: 100%;\n  height: 100%;\n  background: transparent;\n  color: #e0e0e0;\n  border: none;\n  outline: none;\n  font-family: 'Fira Code', monospace;\n  font-size: 14px;\n  padding: 14px;\n  box-sizing: border-box;\n  line-height: 1.5;\n}\n\n.file, .folder {\n  padding: 8px 12px;\n  margin-bottom: 4px;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 14px;\n  transition: all 0.2s ease;\n}\n\n.file {\n  background: #1a1a26;\n  color: #d0d0d0;\n}\n\n.file:hover {\n  background: #2a2a3d;\n  color: #7dfcff;\n}\n\n.folder {\n  background: #161622;\n  color: #89bbff;\n  font-weight: bold;\n}\n\n.folder:hover {\n  background: #25253a;\n  color: #c0eaff;\n}\n\n.folder-contents {\n  margin-left: 16px;\n  display: none;\n}\n\nbutton {\n  padding: 8px 14px;\n  border: none;\n  border-radius: 8px;\n  font-size: 13px;\n  background: #14142a;\n  color: #9fdfff;\n  cursor: pointer;\n  box-shadow: 0 0 6px rgba(140, 220, 255, 0.2);\n  transition: all 0.2s ease;\n}\n\nbutton:hover {\n  background: #9fdfff;\n  color: #0a0a0f;\n  box-shadow: 0 0 10px rgba(159, 223, 255, 0.6);\n}\n\n  </style>\n\n  <div class=\"element-2\" id=\"filepath\">No file loaded</div>\n  <div class=\"element-3\">NebulaCode</div>\n  <div class=\"element-4\">\n      <button onclick=\"createFile()\">üìÑ Create File</button>\n          <button onclick=\"refreshPage()\">üîÑ Refresh Page</button>\n    <button onclick=\"saveFile()\">üíæ Save</button>\n    <button onclick=\"launchFile()\">üöÄ Launch</button>\n  </div>\n\n</head>\n<body>\n\n<div class=\"element-1\" id=\"sidebar\"></div>\n<div class=\"element-0\">\n  <div class=\"code-container\">\n    <div id=\"lineNumbers\" class=\"line-numbers\"></div>\n    <div id=\"editor\" contenteditable=\"true\" spellcheck=\"false\"></div>\n  </div>\n\n\n\n<script>\n// =========================\n// NebulaCode Editor (Basic, Modular, Fixed Enter)\n// =========================\n\n// -- Global References --\nconst editor = document.getElementById(\"editor\");\nconst sidebar = document.getElementById(\"sidebar\");\nconst filepath = document.getElementById(\"filepath\");\nconst lineNumbers = document.getElementById(\"lineNumbers\");\n\nlet currentFilePath = null;\nconst currentUser = localStorage.getItem(\"currentUser\") || \"admin\";\nconst fileSystem = JSON.parse(localStorage.getItem(\"userFileSystems\") || \"{}\")[currentUser] || {};\n\n// -- Entry Point --\ninit();\n\nfunction init() {\n  listFiles(fileSystem);\n  setupEditor();\n  startRefreshLoop();\n  window.addEventListener(\"message\", handleMessage);\n}\n\n// -- File Management --\nfunction listFiles(fs, dir = \"/\", container = sidebar) {\n  const items = fs[dir] || [];\n  items.forEach(item => {\n    const path = dir === \"/\" ? `/${item}` : `${dir}/${item}`;\n    const isFolder = !!fs[path];\n\n    if (isFolder) createFolderElement(item, path, fs, container);\n    else createFileElement(item, path, container);\n  });\n}\n\nfunction createFolderElement(name, path, fs, container) {\n  const excludedFolders = [\"apps\"]; // Add any folder names you want to skip\n\n  if (excludedFolders.includes(name)) return; // ‚ùå Skip rendering this folder\n\n  const folderDiv = document.createElement(\"div\");\n  folderDiv.className = \"folder\";\n  folderDiv.textContent = `üìÅ ${name}`;\n\n  const contentsDiv = document.createElement(\"div\");\n  contentsDiv.className = \"folder-contents\";\n\n  folderDiv.onclick = () => {\n    const visible = contentsDiv.style.display === \"block\";\n    contentsDiv.style.display = visible ? \"none\" : \"block\";\n    folderDiv.textContent = `${visible ? \"üìÅ\" : \"üìÇ\"} ${name}`;\n  };\n\n  container.appendChild(folderDiv);\n  container.appendChild(contentsDiv);\n\n  listFiles(fs, path, contentsDiv);\n}\n\n\nfunction createFileElement(name, path, container) {\n  const fileDiv = document.createElement(\"div\");\n  fileDiv.className = \"file\";\n  fileDiv.textContent = name;\n  fileDiv.onclick = () => loadFile(path);\n  container.appendChild(fileDiv);\n}\n\nfunction loadFile(path) {\n  const content = localStorage.getItem(\"fileContent:\" + path);\n  if (content !== null) {\n    const lines = content.split(\"\\n\").map(line => `<div>${line || \"<br>\"}</div>`).join(\"\");\n    editor.innerHTML = lines;\n    filepath.textContent = path;\n    currentFilePath = path;\n    renderLineNumbers();\n  } else {\n    editor.innerHTML = \"<div><br></div>\";\n    filepath.textContent = \"‚ùå File not found\";\n    currentFilePath = null;\n    renderLineNumbers();\n  }\n}\n\nfunction saveFile() {\n  if (!currentFilePath) return alert(\"‚ùå No file selected.\");\n  const lines = Array.from(editor.querySelectorAll(\"div\")).map(div => div.textContent);\n  const plainText = lines.join(\"\\n\");\n  localStorage.setItem(\"fileContent:\" + currentFilePath, plainText);\n  alert(`‚úÖ Saved ${currentFilePath}`);\n}\n\nfunction launchFile() {\n  if (!currentFilePath) return alert(\"‚ùå No file selected.\");\n  let filename = currentFilePath.split(\"/\").pop();\n  if (filename.endsWith(\".oos\")) filename += \".app\";\n  localStorage.setItem(\"livebridge\", JSON.stringify([`htmlnano ${currentFilePath}`]));\n}\n\nfunction createFile(filename) {\n  localStorage.setItem(\"livebridge\", JSON.stringify([`makefilegui`]));\n  startRefreshLoop();\n}\n\nfunction refreshPage() {\n  location.reload();\n}\n\nfunction handleMessage(e) {\n  const { type, path } = e.data;\n  if (type === \"loadfile\" && typeof path === \"string\") loadFile(path);\n}\n\n// -- Editor Setup --\nfunction setupEditor() {\n  editor.addEventListener(\"keydown\", e => {\n    if (e.key === \"Tab\") {\n      e.preventDefault();\n      insertTextAtCursor(\"  \");\n    } else if (e.key === \"Enter\") {\n      e.preventDefault();\n      insertLineBreak();\n    }\n  });\n\n  editor.addEventListener(\"input\", renderLineNumbers);\n  editor.addEventListener(\"scroll\", () => {\n    lineNumbers.scrollTop = editor.scrollTop;\n  });\n\n  renderLineNumbers();\n}\n\nfunction insertTextAtCursor(text) {\n  const sel = window.getSelection();\n  if (!sel.rangeCount) return;\n\n  const range = sel.getRangeAt(0);\n  range.deleteContents();\n  const textNode = document.createTextNode(text);\n  range.insertNode(textNode);\n\n  range.setStartAfter(textNode);\n  range.collapse(true);\n  sel.removeAllRanges();\n  sel.addRange(range);\n\n  renderLineNumbers();\n}\n\nfunction insertLineBreak() {\n  const sel = window.getSelection();\n  if (!sel.rangeCount) return;\n\n  const range = sel.getRangeAt(0);\n  range.deleteContents();\n\n  const div = document.createElement(\"div\");\n  const br = document.createElement(\"br\");\n  div.appendChild(br);\n  range.insertNode(div);\n\n  const newRange = document.createRange();\n  newRange.setStart(div, 1);\n  newRange.collapse(true);\n  sel.removeAllRanges();\n  sel.addRange(newRange);\n\n  renderLineNumbers();\n}\n\nfunction renderLineNumbers() {\n  if (!lineNumbers) return;\n  const lines = editor.querySelectorAll(\"div\").length || 1;\n  lineNumbers.innerText = Array.from({ length: lines }, (_, i) => i + 1).join(\"\\n\");\n}\n</script>\n\n</body>\n</html>\n"
  }
}